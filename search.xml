<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Node.js基础]]></title>
      <url>http://yoursite.com/2016/08/01/x19/</url>
      <content type="html"><![CDATA[<p><a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="external">jQuery 教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript的回调函数和各种主流开发模式]]></title>
      <url>http://yoursite.com/2016/07/29/x20/</url>
      <content type="html"><![CDATA[<p><a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="external">jQuery 教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title></title>
      <url>http://yoursite.com/2016/07/27/jQuery%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<hr>
<p>title: jQuery基础<br>date: 2016年7月27日15:54:46<br>update: 2016年7月28日21:30:00<br>permalink: x19<br>description: “AJAX 是一种用于创建快速动态网页的技术。</p>
<pre><code>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。&quot;
</code></pre><p>tags:</p>
<ul>
<li>jQuery<br>categories:</li>
<li>笔记</li>
</ul>
<hr>
<p><a href="http://www.w3school.com.cn/jquery/index.asp" target="_blank" rel="external">jQuery 教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Ajax基础]]></title>
      <url>http://yoursite.com/2016/07/26/x18/</url>
      <content type="html"><![CDATA[<h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h2><p>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建 XMLHttpRequest 对象的语法：</span></div><div class="line">variable=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h3><p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<ul>
<li>open(method,url,async)</li>
</ul>
<p>规定请求的类型、URL 以及是否异步处理请求。</p>
<pre><code>method：请求的类型；GET 或 POST
url：文件在服务器上的位置
async：true（异步）或 false（同步）
</code></pre><ul>
<li>send(string)</li>
</ul>
<p>将请求发送到服务器。</p>
<pre><code>string：仅用于 POST 请求
</code></pre><h3 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h3><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p>
<p>然而，在以下情况中，请使用 POST 请求：</p>
<pre><code>无法使用缓存文件（更新服务器上的文件或数据库）
向服务器发送大量数据（POST 没有数据量限制）
发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠
</code></pre><h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h3><p>一个简单的 GET 请求：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"demo_get.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/demo_get.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>AJAX<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>请求数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面的例子中，您可能得到的是缓存的结果。<br>为了避免这种情况，请向 URL 添加一个唯一的 ID：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"demo_get.asp?t="</span> + <span class="built_in">Math</span>.random(),<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<p>如果您希望通过 GET 方法发送信息，请向 URL 添加信息：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"demo_get2.asp?fname=Bill&amp;lname=Gates"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h3><p>一个简单 POST 请求：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"demo_post.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"ajax_test.asp"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</div><div class="line">xmlhttp.send(<span class="string">"fname=Bill&amp;lname=Gates"</span>);</div></pre></td></tr></table></figure></p>
<ul>
<li>setRequestHeader(header,value)</li>
</ul>
<p>向请求添加 HTTP 头。</p>
<pre><code>header: 规定头的名称
value: 规定头的值
</code></pre><h3 id="url-服务器上的文件"><a href="#url-服务器上的文件" class="headerlink" title="url - 服务器上的文件"></a>url - 服务器上的文件</h3><p>open() 方法的 url 参数是服务器上文件的地址：<br>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p>
<h3 id="异步-True-或-False？"><a href="#异步-True-或-False？" class="headerlink" title="异步 - True 或 False？"></a>异步 - True 或 False？</h3><p>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。<br>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：<br>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p>
<pre><code>在等待服务器响应时执行其他脚本
当响应就绪后对响应进行处理
</code></pre><h3 id="Async-true"><a href="#Async-true" class="headerlink" title="Async = true"></a>Async = true</h3><p>当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div></pre></td></tr></table></figure></p>
<h3 id="Async-false"><a href="#Async-false" class="headerlink" title="Async = false"></a>Async = false</h3><p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。<br><strong>注释</strong>:当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">xmlhttp.open(&quot;GET&quot;,&quot;test1.txt&quot;,false);</div><div class="line">xmlhttp.send();</div><div class="line">document.getElementById(&quot;myDiv&quot;).innerHTML=xmlhttp.responseText;</div></pre></td></tr></table></figure></p>
<h2 id="AJAX-服务器响应"><a href="#AJAX-服务器响应" class="headerlink" title="AJAX - 服务器响应"></a>AJAX - 服务器响应</h2><ul>
<li>responseText<br><code>获得字符串形式的响应数据。</code></li>
<li>responseXML<br><code>获得 XML 形式的响应数据。</code></li>
</ul>
<h3 id="responseText-属性"><a href="#responseText-属性" class="headerlink" title="responseText 属性"></a>responseText 属性</h3><p>如果来自服务器的响应并非 XML，请使用 responseText 属性。<br>responseText 属性返回字符串形式的响应，因此您可以这样使用：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/ajax/test1.txt"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Let AJAX change this text<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>通过 AJAX 改变内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="responseXML-属性"><a href="#responseXML-属性" class="headerlink" title="responseXML 属性"></a>responseXML 属性</h3><p>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：<br>请求 books.xml 文件，并解析响应：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></div><div class="line">&#123;</div><div class="line"><span class="keyword">var</span> xmlhttp;</div><div class="line"><span class="keyword">var</span> txt,x,i;</div><div class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</div><div class="line">  &#123;<span class="comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</div><div class="line">  &#125;</div><div class="line"><span class="keyword">else</span></div><div class="line">  &#123;<span class="comment">// code for IE6, IE5</span></div><div class="line">  xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</div><div class="line">  &#125;</div><div class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></div><div class="line">  &#123;</div><div class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</div><div class="line">    &#123;</div><div class="line">    xmlDoc=xmlhttp.responseXML;</div><div class="line">    txt=<span class="string">""</span>;</div><div class="line">    x=xmlDoc.getElementsByTagName(<span class="string">"title"</span>);</div><div class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;x.length;i++)</div><div class="line">      &#123;</div><div class="line">      txt=txt + x[i].childNodes[<span class="number">0</span>].nodeValue + <span class="string">"&lt;br /&gt;"</span>;</div><div class="line">      &#125;</div><div class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=txt;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/example/xmle/books.xml"</span>,<span class="literal">true</span>);</div><div class="line">xmlhttp.send();</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>My Book Collection:<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>获得我的图书收藏列表<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://www.imooc.com/learn/250" target="_blank" rel="external">Ajax全接触</a><br><a href="http://www.imooc.com/article/5501" target="_blank" rel="external">jQuery中的Ajax</a><br><a href="http://www.cnblogs.com/moqing/p/5600112.html" target="_blank" rel="external">Ajax基础详解</a><br><a href="http://www.w3school.com.cn/ajax/" target="_blank" rel="external">AJAX 教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript匿名函数及其闭包]]></title>
      <url>http://yoursite.com/2016/07/24/x17/</url>
      <content type="html"><![CDATA[<h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><p>1.常规定义<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">double</span>(<span class="params">x</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> x * x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2.使用了Function构造函数，把参数列表和函数体都作为字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> double = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'x'</span>, <span class="string">'return x * x;'</span>);</div></pre></td></tr></table></figure></p>
<p>3.匿名函数赋值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> double = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> x* x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="匿名函数的创建"><a href="#匿名函数的创建" class="headerlink" title="匿名函数的创建"></a>匿名函数的创建</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</div><div class="line">    alert(x + y);</div><div class="line">&#125;)(<span class="number">2</span>, <span class="number">3</span>);</div></pre></td></tr></table></figure>
<p>第一个括号创建了一个匿名函数，第二个括号调用该匿名函数，并传入参数。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    counter += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"></div><div class="line"><span class="comment">// 计数器现在为 3</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  counter += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"><span class="comment">// 输出的都是 1 !</span></div></pre></td></tr></table></figure>
<p>所有函数都能访问全局变量。<br>实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。<br>JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。<br>该实例中，内嵌函数可以访问父函数的 counter 变量：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> add = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> counter = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="keyword">return</span> counter += <span class="number">1</span>;&#125;</div><div class="line">&#125;)();</div><div class="line">add();</div><div class="line">add();</div><div class="line">add();</div><div class="line"><span class="comment">// 最后计数器为 3</span></div></pre></td></tr></table></figure></p>
<p>变量 add 指定了函数自我调用的返回值。<br>自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。<br>add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。<br>这个叫作 JavaScript 闭包。它使得函数拥有私有变量变成可能。<br>计数器受匿名函数的作用域保护，只能通过 add 方法修改。</p>
<ul>
<li><em>闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。</em></li>
</ul>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt; lists.length ; i++)&#123;</div><div class="line">    lists[ i ].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(i);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当鼠标移过每一个li元素时，总是弹出lists.length，而不是我们期待的元素下标。当mouseover事件调用监听函数时，首先在匿名函数（ function(){ alert(i); }）内部查找是否定义了 i，结果是没有定义；因此它会向上查找，查找结果是已经定义了，并且i的值是lists.length（循环后的i值）；所以，最终每次弹出的都是lists.length。<br>为得到想要的结果<br>解决方法一：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> , len = lists.length ; i &lt; len ; i++)&#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        lists[ index ].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            alert(index);</div><div class="line">        &#125;;</div><div class="line">    &#125;)(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解决方法二：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = lists.length; i &lt; len; i++)&#123;</div><div class="line">    lists[ i ].$$index = i;    <span class="comment">//通过在Dom元素上绑定$$index属性记录下标</span></div><div class="line">    lists[ i ].onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="keyword">this</span>.$$index);</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解决方法三：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">eventListener</span>(<span class="params">list, index</span>)</span>&#123;</div><div class="line">    list.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(index);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> lists = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> , len = lists.length ; i &lt; len ; i++)&#123;</div><div class="line">    eventListener(lists[ i ] , i);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><a href="http://www.jb51.net/article/57406.htm" target="_blank" rel="external">详谈JavaScript 匿名函数及闭包</a><br><a href="http://www.cnblogs.com/chenxianbin89/archive/2010/01/28/1658392.html" target="_blank" rel="external">对JAVASCRIPT匿名函数的理解（透彻版)</a><br><a href="http://www.runoob.com/js/js-function-closures.html" target="_blank" rel="external">JavaScript 闭包</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript深入理解-1]]></title>
      <url>http://yoursite.com/2016/07/23/x16/</url>
      <content type="html"><![CDATA[<h2 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h2><p><strong>ECMAScript 有 5 种原始类型（primitive type），即 Undefined、Null、Boolean、Number 和 String。</strong></p>
<h3 id="typeof-运算符"><a href="#typeof-运算符" class="headerlink" title="typeof 运算符"></a>typeof 运算符</h3><p>对变量或值调用 typeof 运算符将返回下列值之一：</p>
<blockquote>
<p>undefined - 如果变量是 Undefined 类型的<br>boolean - 如果变量是 Boolean 类型的<br>number - 如果变量是 Number 类型的<br>string - 如果变量是 String 类型的<br>object - 如果变量是一种引用类型或 Null 类型的</p>
</blockquote>
<h2 id="Object对象"><a href="#Object对象" class="headerlink" title="Object对象"></a>Object对象</h2><p>对象是由 new 运算符加上要实例化的对象的名字创建的。例如，下面的代码创建 Object 对象的实例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div></pre></td></tr></table></figure></p>
<p>对象类型有Funcation,Array,Date…<br><strong>尽管括号不是必需的，但是为了避免混乱，最好使用括号。</strong><br>ECMAScript 中的所有对象都由这个对象继承而来，Object 对象中的所有属性和方法都会出现在其他对象中，所以理解了 Object 对象，就可以更好地理解其他对象</p>
<h3 id="Object-对象具有下列属性："><a href="#Object-对象具有下列属性：" class="headerlink" title="Object 对象具有下列属性："></a>Object 对象具有下列属性：</h3><p><code>constructor</code><br>对创建对象的函数的引用（指针）。对于 Object 对象，该指针指向原始的 Object() 函数。<br><code>Prototype</code><br>对该对象的对象原型的引用。对于所有的对象，它默认返回 Object 对象的一个实例。</p>
<h3 id="Object-对象还具有几个方法："><a href="#Object-对象还具有几个方法：" class="headerlink" title="Object 对象还具有几个方法："></a>Object 对象还具有几个方法：</h3><p><code>hasOwnProperty(property)</code><br>判断对象是否有某个特定的属性。必须用字符串指定该属性。（例如，o.hasOwnProperty(“name”)）<br><code>IsPrototypeOf(object)</code><br>判断该对象是否为另一个对象的原型。<br><code>PropertyIsEnumerable</code><br>判断给定的属性是否可以用 for…in 语句进行枚举。<br><code>ToString()</code><br>返回对象的原始字符串表示。对于 Object 对象，ECMA-262 没有定义这个值，所以不同的 ECMAScript 实现具有不同的值。<br><code>ValueOf()</code><br>返回最适合该对象的原始值。对于许多对象，该方法返回的值都与 ToString() 的返回值相同。</p>
<h3 id="Boolean-对象"><a href="#Boolean-对象" class="headerlink" title="Boolean 对象"></a>Boolean 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oFalseObject = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">false</span>);</div><div class="line"><span class="keyword">var</span> bResult = oFalseObject &amp;&amp; <span class="literal">true</span>;	<span class="comment">//输出 true</span></div></pre></td></tr></table></figure>
<p>在 Boolean 表达式中，所有对象都会被自动转换为 true，所以 oFalseObject 的值是 true。然后 true 再与 true 进行 AND 操作，结果为 true。</p>
<h3 id="Number-对象"><a href="#Number-对象" class="headerlink" title="Number 对象"></a>Number 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oNumberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</div><div class="line"><span class="keyword">var</span> iNumber = oNumberObject.valueOf();</div></pre></td></tr></table></figure>
<h4 id="toFixed-方法"><a href="#toFixed-方法" class="headerlink" title="toFixed() 方法"></a>toFixed() 方法</h4><p>toFixed() 方法返回的是具有指定位数小数的数字的字符串表示<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oNumberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</div><div class="line">alert(oNumberObject.toFixed(<span class="number">2</span>));  <span class="comment">//输出 "68.00"</span></div></pre></td></tr></table></figure></p>
<h4 id="toExponential-方法"><a href="#toExponential-方法" class="headerlink" title="toExponential() 方法"></a>toExponential() 方法</h4><p>与格式化数字相关的另一个方法是 toExponential()，它返回的是用科学计数法表示的数字的字符串形式。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oNumberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</div><div class="line">alert(oNumberObject.toExponential(<span class="number">1</span>));  <span class="comment">//输出 "6.8e+1",它表示 6.8x10^1</span></div></pre></td></tr></table></figure></p>
<h4 id="toPrecision-方法"><a href="#toPrecision-方法" class="headerlink" title="toPrecision() 方法"></a>toPrecision() 方法</h4><p>toPrecision() 方法根据最有意义的形式来返回数字的预定形式或指数形式。它有一个参数，即用于表示数的数字总数（不包括指数）。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oNumberObject = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">68</span>);</div><div class="line">alert(oNumberObject.toPrecision(<span class="number">1</span>));  <span class="comment">//输出 "7e+1",以另外的形式表示即 70</span></div><div class="line">alert(oNumberObject.toPrecision(<span class="number">2</span>));  <span class="comment">//输出 "68"</span></div><div class="line">alert(oNumberObject.toPrecision(<span class="number">3</span>));  <span class="comment">//输出 "68.0"</span></div></pre></td></tr></table></figure></p>
<h3 id="String-对象"><a href="#String-对象" class="headerlink" title="String 对象"></a>String 对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oStringObject = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello world"</span>);</div><div class="line">alert(oStringObject.valueOf() == oStringObject.toString());	<span class="comment">//输出 "true"</span></div><div class="line"><span class="comment">/*length 属性*/</span></div><div class="line">alert(oStringObject.length);	<span class="comment">//输出 "11"</span></div><div class="line"><span class="comment">/*charAt() 和 charCodeAt() 方法*/</span></div><div class="line">alert(oStringObject.charAt(<span class="number">1</span>));	<span class="comment">//输出 "e"</span></div><div class="line">alert(oStringObject.charCodeAt(<span class="number">1</span>));	<span class="comment">//输出 "101"</span></div><div class="line"><span class="comment">/*concat() 方法*/</span></div><div class="line"><span class="keyword">var</span> sResult = oStringObject.concat(<span class="string">"world"</span>);</div><div class="line">alert(sResult);		<span class="comment">//输出 "hello world"</span></div><div class="line">alert(oStringObject);	<span class="comment">//输出 "hello "</span></div><div class="line"><span class="comment">/*indexOf() 和 lastIndexOf() 方法*/</span></div><div class="line">alert(oStringObject.indexOf(<span class="string">"o"</span>));		输出 <span class="string">"4"</span></div><div class="line">alert(oStringObject.lastIndexOf(<span class="string">"o"</span>));	输出 <span class="string">"7"</span></div><div class="line"><span class="comment">/*localeCompare() 方法*/</span></div><div class="line">alert(oStringObject.localeCompare(<span class="string">"brick"</span>));		<span class="comment">//输出 "1"</span></div><div class="line">alert(oStringObject.localeCompare(<span class="string">"yellow"</span>));		<span class="comment">//输出 "0"</span></div><div class="line">alert(oStringObject.localeCompare(<span class="string">"zoo"</span>));		<span class="comment">//输出 "-1"</span></div><div class="line"><span class="comment">/*slice() 和 substring()*/</span></div><div class="line">alert(oStringObject.slice(<span class="string">"3"</span>));		<span class="comment">//输出 "lo world"</span></div><div class="line">alert(oStringObject.substring(<span class="string">"3"</span>));		<span class="comment">//输出 "lo world"</span></div><div class="line">alert(oStringObject.slice(<span class="string">"3"</span>, <span class="string">"7"</span>));		<span class="comment">//输出 "lo w"</span></div><div class="line">alert(oStringObject.substring(<span class="string">"3"</span>, <span class="string">"7"</span>));	<span class="comment">//输出 "lo w"</span></div><div class="line"><span class="comment">/*toLowerCase()、toLocaleLowerCase()、toUpperCase() 和 toLocaleUpperCase()*/</span></div><div class="line">alert(oStringObject.toLocaleUpperCase());	<span class="comment">//输出 "HELLO WORLD"</span></div><div class="line">alert(oStringObject.toUpperCase());		<span class="comment">//输出 "HELLO WORLD"</span></div><div class="line">alert(oStringObject.toLocaleLowerCase());	<span class="comment">//输出 "hello world"</span></div><div class="line">alert(oStringObject.toLowerCase());		<span class="comment">//输出 "hello world"</span></div><div class="line"><span class="comment">/*instanceof 运算符*/</span></div><div class="line">alert(oStringObject <span class="keyword">instanceof</span> <span class="built_in">String</span>);	<span class="comment">//输出 "true"</span></div></pre></td></tr></table></figure>
<h2 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h2><p>在函数代码中，使用特殊对象 arguments，开发者无需明确指出参数名，就能访问它们。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">howManyArgs</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="built_in">arguments</span>.length);</div><div class="line">&#125;</div><div class="line"><span class="comment">//依次显示 "2"、"0" 和 "1"。</span></div><div class="line">howManyArgs(<span class="string">"string"</span>, <span class="number">45</span>);</div><div class="line">howManyArgs();</div><div class="line">howManyArgs(<span class="number">12</span>);</div></pre></td></tr></table></figure></p>
<h2 id="Function-对象（类）"><a href="#Function-对象（类）" class="headerlink" title="Function 对象（类）"></a>Function 对象（类）</h2><p>Function 类可以表示开发者定义的任何函数。<br>用 Function 类直接创建函数的语法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> function_name = <span class="keyword">new</span> <span class="function"><span class="keyword">function</span>(<span class="params">arg1, arg2, ..., argN, function_body</span>)</span></div></pre></td></tr></table></figure></p>
<p>在上面的形式中，每个 arg 都是一个参数，最后一个参数是函数主体（要执行的代码）。这些参数必须是字符串。</p>
<h3 id="Function-对象的-length-属性"><a href="#Function-对象的-length-属性" class="headerlink" title="Function 对象的 length 属性"></a>Function 对象的 length 属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">iNum</span>) </span>&#123;</div><div class="line">  alert(iNum + <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="string">"Hi"</span>);</div><div class="line">&#125;</div><div class="line">alert(doAdd.length);	<span class="comment">//输出 "1"</span></div><div class="line">alert(sayHi.length);	<span class="comment">//输出 "0"</span></div></pre></td></tr></table></figure>
<p>函数 doAdd() 定义了一个参数，因此它的 length 是 1；sayHi() 没有定义参数，所以 length 是 0。</p>
<h3 id="Function-对象的方法"><a href="#Function-对象的方法" class="headerlink" title="Function 对象的方法"></a>Function 对象的方法</h3><p>Function 对象也有与所有对象共享的 valueOf() 方法和 toString() 方法。这两个方法返回的都是函数的源代码，在调试时尤其有用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">iNum</span>) </span>&#123;</div><div class="line">  alert(iNum + <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">document</span>.write(doAdd.toString());</div></pre></td></tr></table></figure></p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><strong>对象</strong><br>基于代码的名词（人、地点或事物）的表示<br><strong>类</strong><br>每个对象都由类定义，可以把类看做对象的配方。类不仅要定义对象的接口（interface）（开发者访问的属性和方法），还要定义对象的内部工作（使属性和方法发挥作用的代码）。编译器和解释程序都根据类的说明构建对象。<br><strong>实例</strong><br>程序使用类创建对象时，生成的对象叫作类的实例（instance）。对类生成的对象的个数的唯一限制来自于运行代码的机器的物理内存。每个实例的行为相同，但实例处理一组独立的数据。由类创建对象实例的过程叫做实例化（instantiation）。</p>
<h3 id="面向对象语言的要求"><a href="#面向对象语言的要求" class="headerlink" title="面向对象语言的要求"></a>面向对象语言的要求</h3><p>一种面向对象语言需要向开发者提供四种基本能力：</p>
<blockquote>
<p>封装 - 把相关的信息（无论数据或方法）存储在对象中的能力<br>聚集 - 把一个对象存储在另一个对象内的能力<br>继承 - 由另一个类（或多个类）得来类的属性和方法的能力<br>多态 - 编写能以多种方法运行的函数或方法的能力</p>
</blockquote>
<h3 id="对象的构成"><a href="#对象的构成" class="headerlink" title="对象的构成"></a>对象的构成</h3><p>在 ECMAScript 中，对象由特性（attribute）构成，特性可以是原始值，也可以是引用值。如果特性存放的是函数，它将被看作对象的方法（method），否则该特性被看作对象的属性（property）。</p>
<h3 id="声明和实例化"><a href="#声明和实例化" class="headerlink" title="声明和实例化"></a>声明和实例化</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oObject = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> oStringObject = <span class="keyword">new</span> <span class="built_in">String</span>();</div></pre></td></tr></table></figure>
<h3 id="对象废除"><a href="#对象废除" class="headerlink" title="对象废除"></a>对象废除</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oObject = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line"><span class="comment">// do something with the object here</span></div><div class="line">oObject = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<h2 id="关键字-this"><a href="#关键字-this" class="headerlink" title="关键字 this"></a>关键字 this</h2><h3 id="this-的功能"><a href="#this-的功能" class="headerlink" title="this 的功能"></a>this 的功能</h3><p>关键字 this 总是指向调用该方法的对象</p>
<h3 id="使用-this-的原因"><a href="#使用-this-的原因" class="headerlink" title="使用 this 的原因"></a>使用 this 的原因</h3><p>为什么使用 this 呢？因为在实例化对象时，总是不能确定开发者会使用什么样的变量名。使用 this，即可在任何多个地方重用同一个函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> oCar1 = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">oCar1.color = <span class="string">"red"</span>;</div><div class="line">oCar1.showColor = showColor;</div><div class="line"><span class="keyword">var</span> oCar2 = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">oCar2.color = <span class="string">"blue"</span>;</div><div class="line">oCar2.showColor = showColor;</div><div class="line">oCar1.showColor();		<span class="comment">//输出 "red"</span></div><div class="line">oCar2.showColor();		<span class="comment">//输出 "blue"</span></div></pre></td></tr></table></figure></p>
<p>在上面的代码中，首先用 this 定义函数 showColor()，然后创建两个对象（oCar1 和 oCar2），一个对象的 color 属性被设置为 “red”，另一个对象的 color 属性被设置为 “blue”。两个对象都被赋予了属性 showColor，指向原始的 showColor () 函数（注意这里不存在命名问题，因为一个是全局函数，而另一个是对象的属性）。调用每个对象的 showColor()，oCar1 输出是 “red”，而 oCar2 的输出是 “blue”。这是因为调用 oCar1.showColor() 时，函数中的 this 关键字等于 oCar1。调用 oCar2.showColor() 时，函数中的 this 关键字等于 oCar2。<br><strong>注意，引用对象的属性时，必须使用 this 关键</strong><br>如果不用对象或 this 关键字引用变量，ECMAScript 就会把它看作局部变量或全局变量。然后该函数将查找名为 color 的局部或全局变量，但是不会找到。结果如何呢？该函数将在警告中显示 “null”。</p>
<h2 id="定义类或对象"><a href="#定义类或对象" class="headerlink" title="定义类或对象"></a>定义类或对象</h2><p>使用预定义对象只是面向对象语言的能力的一部分，它真正强大之处在于能够创建自己专用的类和对象。</p>
<h3 id="工厂方式"><a href="#工厂方式" class="headerlink" title="工厂方式"></a>工厂方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> oTempCar = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">  oTempCar.color = <span class="string">"blue"</span>;</div><div class="line">  oTempCar.doors = <span class="number">4</span>;</div><div class="line">  oTempCar.mpg = <span class="number">25</span>;</div><div class="line">  oTempCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.color);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> oTempCar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oCar1 = createCar();</div><div class="line"><span class="keyword">var</span> oCar2 = createCar();</div></pre></td></tr></table></figure>
<p>在这里，第一个例子中的所有代码都包含在 createCar() 函数中。此外，还有一行额外的代码，返回 car 对象（oTempCar）作为函数值。调用此函数，将创建新对象，并赋予它所有必要的属性，复制出一个我们在前面说明过的 car 对象。因此，通过这种方法，我们可以很容易地创建 car 对象的两个版本（oCar1 和 oCar2），它们的属性完全一样。</p>
<h4 id="为函数传递参数"><a href="#为函数传递参数" class="headerlink" title="为函数传递参数"></a>为函数传递参数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params">sColor,iDoors,iMpg</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> oTempCar = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">  oTempCar.color = sColor;</div><div class="line">  oTempCar.doors = iDoors;</div><div class="line">  oTempCar.mpg = iMpg;</div><div class="line">  oTempCar.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.color);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> oTempCar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oCar1 = createCar(<span class="string">"red"</span>,<span class="number">4</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> oCar2 = createCar(<span class="string">"blue"</span>,<span class="number">3</span>,<span class="number">25</span>);</div><div class="line">oCar1.showColor();		<span class="comment">//输出 "red"</span></div></pre></td></tr></table></figure>
<h4 id="在工厂函数外定义对象的方法"><a href="#在工厂函数外定义对象的方法" class="headerlink" title="在工厂函数外定义对象的方法"></a>在工厂函数外定义对象的方法</h4><p>前面的例子中，每次调用函数 createCar()，都要创建新函数 showColor()，意味着每个对象都有自己的 showColor() 版本。而事实上，每个对象都共享同一个函数。<br>有些开发者在工厂函数外定义对象的方法，然后通过属性指向该方法，从而避免这个问题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCar</span>(<span class="params">sColor,iDoors,iMpg</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> oTempCar = <span class="keyword">new</span> <span class="built_in">Object</span>;</div><div class="line">  oTempCar.color = sColor;</div><div class="line">  oTempCar.doors = iDoors;</div><div class="line">  oTempCar.mpg = iMpg;</div><div class="line">  oTempCar.showColor = showColor;</div><div class="line">  <span class="keyword">return</span> oTempCar;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oCar1 = createCar(<span class="string">"red"</span>,<span class="number">4</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> oCar2 = createCar(<span class="string">"blue"</span>,<span class="number">3</span>,<span class="number">25</span>);</div><div class="line">oCar1.showColor();		<span class="comment">//输出 "red"</span></div><div class="line">oCar2.showColor();		<span class="comment">//输出 "blue"</span></div></pre></td></tr></table></figure></p>
<p>在上面这段重写的代码中，在函数 createCar() 之前定义了函数 showColor()。在 createCar() 内部，赋予对象一个指向已经存在的 showColor() 函数的指针。从功能上讲，这样解决了重复创建函数对象的问题；但是从语义上讲，该函数不太像是对象的方法。</p>
<h3 id="构造函数方式"><a href="#构造函数方式" class="headerlink" title="构造函数方式"></a>构造函数方式</h3><p>创建构造函数就像创建工厂函数一样容易。第一步选择类名，即构造函数的名字。根据惯例，这个名字的首字母大写，以使它与首字母通常是小写的变量名分开。除了这点不同，构造函数看起来很像工厂函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">sColor,iDoors,iMpg</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.color = sColor;</div><div class="line">  <span class="keyword">this</span>.doors = iDoors;</div><div class="line">  <span class="keyword">this</span>.mpg = iMpg;</div><div class="line">  <span class="keyword">this</span>.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.color);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> oCar1 = <span class="keyword">new</span> Car(<span class="string">"red"</span>,<span class="number">4</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> oCar2 = <span class="keyword">new</span> Car(<span class="string">"blue"</span>,<span class="number">3</span>,<span class="number">25</span>);</div></pre></td></tr></table></figure></p>
<p>下面为您解释上面的代码与工厂方式的差别。首先在构造函数内没有创建对象，而是使用 this 关键字。使用 new 运算符构造函数时，在执行第一行代码前先创建一个对象，只有用 this 才能访问该对象。然后可以直接赋予 this 属性，默认情况下是构造函数的返回值（不必明确使用 return 运算符）。</p>
<h3 id="原型方式"><a href="#原型方式" class="headerlink" title="原型方式"></a>原型方式</h3><p>该方式利用了对象的 prototype 属性，可以把它看成创建新对象所依赖的原型。<br>这里，首先用空构造函数来设置类名。然后所有的属性和方法都被直接赋予 prototype 属性。我们重写了前面的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">Car.prototype.color = <span class="string">"blue"</span>;</div><div class="line">Car.prototype.doors = <span class="number">4</span>;</div><div class="line">Car.prototype.mpg = <span class="number">25</span>;</div><div class="line">Car.prototype.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> oCar1 = <span class="keyword">new</span> Car();</div><div class="line"><span class="keyword">var</span> oCar2 = <span class="keyword">new</span> Car();</div></pre></td></tr></table></figure></p>
<p>在这段代码中，首先定义构造函数（Car），其中无任何代码。接下来的几行代码，通过给 Car 的 prototype 属性添加属性去定义 Car 对象的属性。调用 new Car() 时，原型的所有属性都被立即赋予要创建的对象，意味着所有 Car 实例存放的都是指向 showColor() 函数的指针。从语义上讲，所有属性看起来都属于一个对象，因此解决了前面两种方式存在的问题。<br><strong>目前使用最广泛的是混合的构造函数/原型方式。</strong></p>
<h3 id="混合的构造函数-原型方式"><a href="#混合的构造函数-原型方式" class="headerlink" title="混合的构造函数/原型方式"></a>混合的构造函数/原型方式</h3><p>联合使用构造函数和原型方式，就可像用其他程序设计语言一样创建对象。这种概念非常简单，即用构造函数定义对象的所有非函数属性，用原型方式定义对象的函数属性（方法）。结果是，所有函数都只创建一次，而每个对象都具有自己的对象属性实例。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">sColor,iDoors,iMpg</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.color = sColor;</div><div class="line">  <span class="keyword">this</span>.doors = iDoors;</div><div class="line">  <span class="keyword">this</span>.mpg = iMpg;</div><div class="line">  <span class="keyword">this</span>.drivers = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"Mike"</span>,<span class="string">"John"</span>);</div><div class="line">&#125;</div><div class="line">Car.prototype.showColor = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> oCar1 = <span class="keyword">new</span> Car(<span class="string">"red"</span>,<span class="number">4</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">var</span> oCar2 = <span class="keyword">new</span> Car(<span class="string">"blue"</span>,<span class="number">3</span>,<span class="number">25</span>);</div><div class="line">oCar1.drivers.push(<span class="string">"Bill"</span>);</div><div class="line">alert(oCar1.drivers);	<span class="comment">//输出 "Mike,John,Bill"</span></div><div class="line">alert(oCar2.drivers);	<span class="comment">//输出 "Mike,John"</span></div></pre></td></tr></table></figure></p>
<h2 id="原型链（prototype-chaining）"><a href="#原型链（prototype-chaining）" class="headerlink" title="原型链（prototype chaining）"></a>原型链（prototype chaining）</h2><p>继承这种形式在 ECMAScript 中原本是用于原型链的。上一章介绍了定义类的原型方式。原型链扩展了这种方式，以一种有趣的方式实现继承机制。<br>在上一章学过，prototype 对象是个模板，要实例化的对象都以这个模板为基础。总而言之，prototype 对象的任何属性和方法都被传递给那个类的所有实例。原型链利用这种功能来实现继承机制。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassA</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">ClassA.prototype.color = <span class="string">"blue"</span>;</div><div class="line">ClassA.prototype.sayColor = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.color);</div><div class="line">&#125;;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ClassB</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;</div><div class="line">ClassB.prototype = <span class="keyword">new</span> ClassA();</div></pre></td></tr></table></figure></p>
<p><a href="http://www.imooc.com/view/277" target="_blank" rel="external">JavaScript深入浅出</a><br><a href="http://www.w3school.com.cn/js/index.asp" target="_blank" rel="external">JavaScript 教程</a><br><a href="http://www.runoob.com/js/js-tutorial.html" target="_blank" rel="external">JavaScript 教程</a><br><a href="https://www.douban.com/note/293217333/" target="_blank" rel="external">理解prototype(原型)</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Yeoman介绍和应用]]></title>
      <url>http://yoursite.com/2016/07/23/x15/</url>
      <content type="html"><![CDATA[<h2 id="Yeoman介绍"><a href="#Yeoman介绍" class="headerlink" title="Yeoman介绍"></a>Yeoman介绍</h2><p>Yeoman是Google的团队和外部贡献者团队合作开发的，他的目标是通过Grunt（一个用于开发任务自动化的命令行工具）和Bower（一个HTML、CSS、Javascript和图片等前端资源的包管理器）的包装为开发者创建一个易用的工作流。</p>
<p>Yeoman主要有三部分组成：yo（脚手架工具）、grunt（构建工具）、bower（包管理器）。这三个工具是分别独立开发的，但是需要配合使用，来实现我们高效的工作流模式。</p>
<h2 id="Yeoman工具包yo命令"><a href="#Yeoman工具包yo命令" class="headerlink" title="Yeoman工具包yo命令"></a>Yeoman工具包yo命令</h2><p>yo插件都是通过npm, Node.js包管理器安装和管理的.</p>
<h3 id="全局安装yo"><a href="#全局安装yo" class="headerlink" title="全局安装yo"></a>全局安装yo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g yo</div></pre></td></tr></table></figure>
<p>如果你还没有安装grunt,bower，也需要一起安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli bower</div></pre></td></tr></table></figure></p>
<h2 id="Yeoman工具包bower-grunt的组合用法"><a href="#Yeoman工具包bower-grunt的组合用法" class="headerlink" title="Yeoman工具包bower,grunt的组合用法"></a>Yeoman工具包bower,grunt的组合用法</h2><p>有关bower的介绍，请参考：<a href="http://blog.fens.me/nodejs-bower-intro/" target="_blank" rel="external">bower解决js的依赖管理</a><br>有关grunt的介绍，请参考：<a href="http://blog.fens.me/nodejs-grunt-intro/" target="_blank" rel="external">grunt让Nodejs规范起来</a></p>
<h3 id="使用bower命令查看项目依赖："><a href="#使用bower命令查看项目依赖：" class="headerlink" title="使用bower命令查看项目依赖："></a>使用bower命令查看项目依赖：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">~ D:\workspace\javascript\nodejs-yo&gt;bower list</div><div class="line">bower check-new     Checking <span class="keyword">for</span> new versions of the project dependencies..</div><div class="line">nodejs-yo<span class="comment">#0.0.0 D:\workspace\javascript\nodejs-yo</span></div><div class="line">├── jquery<span class="comment">#1.9.1 (latest is 2.0.3)</span></div><div class="line">├── modernizr<span class="comment">#2.6.2</span></div><div class="line">└── requirejs<span class="comment">#2.1.8</span></div></pre></td></tr></table></figure>
<p>我们发现生成的webapp中，有4个依赖库，jquery,modernizr,requirejs。</p>
<h3 id="使用grunt命令执行单元测试"><a href="#使用grunt命令执行单元测试" class="headerlink" title="使用grunt命令执行单元测试"></a>使用grunt命令执行单元测试</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">D:\workspace\javascript\nodejs-yo&gt;grunt <span class="built_in">test</span></div><div class="line">Running <span class="string">"clean:server"</span> (clean) task</div><div class="line">Cleaning <span class="string">".tmp"</span>...OK</div><div class="line">Running <span class="string">"concurrent:test"</span> (concurrent) task</div><div class="line">Running <span class="string">"copy:styles"</span> (copy) task</div><div class="line">Running <span class="string">"coffee:dist"</span> (coffee) task</div><div class="line">Running <span class="string">"autoprefixer:dist"</span> (autoprefixer) task</div><div class="line">File <span class="string">".tmp/styles/main.css"</span> created.</div><div class="line"></div><div class="line">Running <span class="string">"connect:test"</span> (connect) task</div><div class="line">Starting connect web server on localhost:9000.</div><div class="line">Running <span class="string">"mocha:all"</span> (mocha) task</div><div class="line">Testing: http://localhost:9000/index.html</div><div class="line">  1 <span class="built_in">test</span> complete (107 ms)</div><div class="line">&gt;&gt; 1 passed! (0.11s)</div><div class="line"></div><div class="line">Done, without errors.</div></pre></td></tr></table></figure>
<h3 id="使用grunt命令启动一个node服务器"><a href="#使用grunt命令启动一个node服务器" class="headerlink" title="使用grunt命令启动一个node服务器"></a>使用grunt命令启动一个node服务器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~ D:\workspace\javascript\nodejs-yo&gt;grunt server --force</div></pre></td></tr></table></figure>
<h3 id="修改app-index-html代码，增加对canvas的检查。"><a href="#修改app-index-html代码，增加对canvas的检查。" class="headerlink" title="修改app/index.html代码，增加对canvas的检查。"></a>修改app/index.html代码，增加对canvas的检查。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">~ vi app/index.html</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">window.onload = <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line"><span class="keyword">if</span> (canvasSupported()) &#123;</div><div class="line">alert(<span class="string">'canvas supported'</span>);</div><div class="line">&#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">canvasSupported</span></span>() &#123;</div><div class="line">var canvas = document.createElement(<span class="string">'canvas'</span>);</div><div class="line"><span class="built_in">return</span> (canvas.getContext &amp;&amp; canvas.getContext(<span class="string">'2d'</span>));</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p><a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a><br><a href="http://blog.fens.me/nodejs-yeoman-intro/" target="_blank" rel="external">Yeoman自动构建js项目</a><br><a href="http://www.ibm.com/developerworks/cn/web/1402_chengfu_yeoman/" target="_blank" rel="external">Yeoman：Web 应用开发流程与工具</a><br><a href="http://www.imooc.com/view/30" target="_blank" rel="external">Grunt-beginner前端自动化工具</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Bower介绍和应用]]></title>
      <url>http://yoursite.com/2016/07/23/x14/</url>
      <content type="html"><![CDATA[<h2 id="为什么我会在意Bower？"><a href="#为什么我会在意Bower？" class="headerlink" title="为什么我会在意Bower？"></a>为什么我会在意Bower？</h2><p>1.<strong>节省时间</strong>。为什么要学习Bower的第一个原因，就是它会为你节省寻找客户端的依赖关系的时间。每次我需要安装jQuery的时候，我都需要去jQuery网站下载包或使用CDN版本。但是有了Bower，你只需要输入一个命令，jquery就会安装在本地计算机上，你不需要去记版本号之类的东西，你也可以通过Bower的info命令去查看任意库的信息。<br>2.<strong>脱机工作</strong>。 Bower会在用户主目录下创建一个.bower的文件夹，这个文件夹会下载所有的资源、并安装一个软件包使它们可以离线使用。如果你熟悉Java，Bower即是一个类似于现在流行的Maven构建系统的.m2仓库。每次你下载任何资源库都将被安装在两个文件夹中——一个在的应用程序文件夹，另一个在用户主目录下的.bower文件夹。因此，下一次你需要这个仓库时，就会用那个用户主目录下.bower中的版本。<br>3.<strong>可以很容易地展现客户端的依赖关系</strong>。你可以创建一个名为<code>bower.json</code>的文件，在这个文件里你可以指定所有客户端的依赖关系，任何时候你需要弄清楚你正在使用哪些库，你可以参考这个文件。<br>4.<strong>让升级变得简单</strong>。假设某个库的新版本发布了一个重要的安全修补程序，为了安装新版本，你只需要运行一个命令，bower会自动更新所有有关新版本的依赖关系。</p>
<p>##前提准备<br>为了安装bower，你首先需要安装如下文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Node：下载最新版本的node.js</div><div class="line">NPM： NPM 是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</div><div class="line">Git：你需要从git仓库获取一些代码包。</div></pre></td></tr></table></figure></p>
<h2 id="安装Bower"><a href="#安装Bower" class="headerlink" title="安装Bower"></a>安装Bower</h2><p>一旦你已经安装了上面所说的所有必要文件，键入以下命令安装Bower：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g bower</div></pre></td></tr></table></figure></p>
<p>这行命令是Bower的全局安装，-g 操作表示全局。</p>
<p>##开始使用Bower<br>安装完bower之后就可以使用所有的bower命令了。可以键入help 命令来查看bower可以完成那些操作<br><a href="http://www.imooc.com/article/1701" target="_blank" rel="external">Bower —— 管理你的客户端依赖关系</a><br><a href="www.imooc.com/article/8729">windows下配置bower路径</a><br><a href="http://www.imooc.com/view/30" target="_blank" rel="external">Grunt-beginner前端自动化工具</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gulp介绍和应用]]></title>
      <url>http://yoursite.com/2016/07/23/x13/</url>
      <content type="html"><![CDATA[<h2 id="与Grunt的不同："><a href="#与Grunt的不同：" class="headerlink" title="与Grunt的不同："></a>与Grunt的不同：</h2><p>说起自动化，自然少不了Grunt，这位前辈目前社区完善，拥有几千个现成插件，而Gulp的出现，希望取其精华并取代Grunt，成为最流行的Javascript构建工具，Gulp采用代码优于配置的策略，让简单的事继续简单，让复杂的事变得可管理；</p>
<ul>
<li>流：Gulp是一个基于流的构建系统，使用代码优于配置的策略。</li>
<li>插件：Gulp的插件更纯粹，单一的功能，并坚持一个插件只做一件事。</li>
<li>代码优于配置：维护Gulp更像是写代码，而且Gulp遵循CommonJS规范，因此跟写Node程序没有差别。</li>
<li>没有产生中间文件</li>
</ul>
<p>使用Gulp的优势就是利用流的方式进行文件的处理，通过管道将多个任务和操作连接起来，因此只有一次I/O的过程，流程更清晰，更纯粹。Gulp去除了中间文件，只将最后的输出写入磁盘，整个过程因此变得更快。<br>下面在根目录下新建一个Gulpfile.js，我们将完成以下任务：</p>
<ul>
<li>图片的无损压缩</li>
<li>Sass文件的编译压缩</li>
<li>JS文件的压缩合并</li>
</ul>
<p>对以上任务的实时监听<br>cmd进入项目根目录，安装所需要的Gulp及其插件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install gulp gulp-imagemin gulp-ruby-sass gulp-uglify gulp-cache gulp-watch --save-dev</div></pre></td></tr></table></figure></p>
<p>Gulp遵循Commonjs规范，所以你可以像写Nodejs程序一样把插件们require进来；<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> gulp=<span class="built_in">require</span>(<span class="string">'gulp'</span>);</div><div class="line"><span class="keyword">var</span> imagemin=<span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>);</div><div class="line"><span class="keyword">var</span> cache=<span class="built_in">require</span>(<span class="string">'gulp-cache'</span>);</div><div class="line"><span class="keyword">var</span> uglify=<span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</div><div class="line"><span class="keyword">var</span> sass=<span class="built_in">require</span>(<span class="string">'gulp-ruby-sass'</span>);</div><div class="line"><span class="keyword">var</span> watch=<span class="built_in">require</span>(<span class="string">'gulp-watch'</span>);</div></pre></td></tr></table></figure></p>
<p><a href="http://www.gulpjs.com.cn/" target="_blank" rel="external">Gulp</a><br><a href="http://www.imooc.com/article/2364" target="_blank" rel="external">Gulp开发教程</a><br><a href="http://www.imooc.com/view/30" target="_blank" rel="external">Grunt-beginner前端自动化工具</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Grunt介绍和应用]]></title>
      <url>http://yoursite.com/2016/07/23/x12/</url>
      <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>Grunt和 Grunt 插件是通过 npm 安装并管理的，npm是 Node.js 的包管理器。</p>
<p>Grunt 0.4.x 必须配合Node.js <code>&gt;= 0.8.0</code>版本使用。；奇数版本号的 Node.js 被认为是不稳定的开发版。</p>
<p>在安装 Grunt 前，请确保当前环境中所安装的 npm 已经是最新版本，执行 <code>npm update -g npm</code> 指令进行升级（在某些系统中可能需要<code>sudo</code>指令）。</p>
<h3 id="安装-CLI"><a href="#安装-CLI" class="headerlink" title="安装 CLI"></a>安装 CLI</h3><p>在继续学习前，你需要先将Grunt命令行（CLI）安装到全局环境中。安装时可能需要使用sudo（针对OSX、*nix、BSD等系统中）权限或者作为管理员（对于Windows环境）来执行以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g grunt-cli</div></pre></td></tr></table></figure></p>
<p>上述命令执行完后，<code>grunt</code> 命令就被加入到你的系统路径中了，以后就可以在任何目录下执行此命令了。</p>
<p>注意，安装<code>grunt-cli</code>并不等于安装了 Grunt！Grunt CLI的任务很简单：调用与<code>Gruntfile</code>在同一目录中 Grunt。这样带来的好处是，允许你在同一个系统上同时安装多个版本的 Grunt。</p>
<p>这样就能让多个版本的 Grunt 同时安装在同一台机器上。</p>
<h2 id="Gruntfile-js瘦身"><a href="#Gruntfile-js瘦身" class="headerlink" title="Gruntfile.js瘦身"></a>Gruntfile.js瘦身</h2><ol>
<li>使用load-grunt-tasks（<a href="https://www.npmjs.com/package/load-grunt-tasks）" target="_blank" rel="external">https://www.npmjs.com/package/load-grunt-tasks）</a><br>此grunt插件会根据package.json加载相应的Grunt任务，帮我们省去了手动加载的麻烦。</li>
<li>使用load-grunt-config（<a href="https://www.npmjs.com/package/load-grunt-config）" target="_blank" rel="external">https://www.npmjs.com/package/load-grunt-config）</a><br>这时你的Gruntfile.js会变得非常简单：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line">    <span class="built_in">require</span>(<span class="string">'load-grunt-config'</span>)(grunt, &#123;</div><div class="line">        <span class="comment">// Grunt任务配置目录</span></div><div class="line">        configPath: path.join(process.cwd(), <span class="string">'grunt/config'</span>),</div><div class="line">        <span class="comment">// 加载Grunt任务并初始化</span></div><div class="line">        loadGruntTasks: &#123;</div><div class="line">            pattern: [<span class="string">'grunt-*'</span>],</div><div class="line">            config: <span class="built_in">require</span>(<span class="string">'./package.json'</span>),</div><div class="line">            scope: <span class="string">'devDependencies'</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="减少构建任务时间"><a href="#减少构建任务时间" class="headerlink" title="减少构建任务时间"></a>减少构建任务时间</h2><p>因为grunt任务是单进程串行执行，加上每个任务都会有文件IO，所以任务执行效率并不高（我们现在有项目一次JS修改变动的Grunt执行花费甚至达到了10秒的级别，当然前端代码文件多也是一个原因）。根据本人亲身体验，大于2S的构建时间，就能让你在开发中感觉到中断：文件修改保存后，马上去刷新浏览器，是看不到文件修改效果的。所以减少构建时间非常有必要。</p>
<ol>
<li><p>说到构建时间，首先就得知道我们每个构建任务花费的时间。这时有两个插件可以使用：time-grunt（<a href="https://www.npmjs.com/package/time-grunt）" target="_blank" rel="external">https://www.npmjs.com/package/time-grunt）</a> 和grunt-timer（<a href="https://www.npmjs.com/package/grunt-timer）" target="_blank" rel="external">https://www.npmjs.com/package/grunt-timer）</a> 。time-grunt在构建完成后，会给出每个任务的耗时及占总耗时的百分比。但如果有watch任务存在，是看不到这个时间统计结果的，这时我们可以用grunt-timer;</p>
</li>
<li><p>另一个不得不提到的插件是grunt-newer(<a href="https://www.npmjs.com/package/grunt-newer" target="_blank" rel="external">https://www.npmjs.com/package/grunt-newer</a>) 。有了这个插件，我们就可以做到文件更改后，增量更新，而不是对所有的文件去执行任务task。此插件的使用也是非常简单，只需要在原来任务前加上newer:即可</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">watch: &#123;</div><div class="line">    css: &#123;</div><div class="line">        files: <span class="string">'src/sass/**/*.scss'</span>,</div><div class="line">        <span class="comment">//tasks: ['compass:dev']</span></div><div class="line">    &#125;,</div><div class="line">    js: &#123;</div><div class="line">        files: <span class="string">'src/js/**/*.js'</span>,</div><div class="line">        tasks: [<span class="string">'newer:concat'</span>]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><a href="http://www.gruntjs.net/" target="_blank" rel="external">Grunt</a><br><a href="http://www.alloyteam.com/2015/10/8614/" target="_blank" rel="external">优化你的grunt构建</a><br><a href="http://www.imooc.com/article/1917" target="_blank" rel="external">前端自动化之利剑</a><br><a href="http://www.imooc.com/view/30" target="_blank" rel="external">Grunt-beginner前端自动化工具</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ReactJS组件]]></title>
      <url>http://yoursite.com/2016/07/23/x11/</url>
      <content type="html"><![CDATA[<p><a href="https://facebook.github.io/react/downloads.html" target="_blank" rel="external">react</a><br><a href="http://reactjs.cn/" target="_blank" rel="external">reactjs</a><br><a href="http://www.imooc.com/view/504" target="_blank" rel="external">React入门</a><br><a href="http://www.imooc.com/view/507" target="_blank" rel="external">React实战</a><br><a href="http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="external">React 入门实例教程</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AngularJS入门和进阶]]></title>
      <url>http://yoursite.com/2016/07/23/x10/</url>
      <content type="html"><![CDATA[<h2 id="构建此应用！"><a href="#构建此应用！" class="headerlink" title="构建此应用！"></a>构建此应用！</h2><h3 id="环境准备：-Node-js"><a href="#环境准备：-Node-js" class="headerlink" title="环境准备： Node.js"></a>环境准备： Node.js</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在终端窗口运行 node -v 和 npm -v ，来确认你的 node 版本为 v5.x.x ， npm 版本为 3.x.x 。 老版本会出错。</div></pre></td></tr></table></figure>
<h3 id="创建并配置项目"><a href="#创建并配置项目" class="headerlink" title="创建并配置项目"></a>创建并配置项目</h3><h4 id="创建项目文件夹"><a href="#创建项目文件夹" class="headerlink" title="创建项目文件夹"></a>创建项目文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir angular2-quickstart</div><div class="line"><span class="built_in">cd</span>    angular2-quickstart</div></pre></td></tr></table></figure>
<h4 id="添加包定义与配置文件"><a href="#添加包定义与配置文件" class="headerlink" title="添加包定义与配置文件"></a>添加包定义与配置文件</h4><p>往项目目录下添加下列包定义与配置文件：<br>package.json 列出了“快速起步”应用的依赖，并定义了一些有用的脚本。<br>tsconfig.json 是 TypeScript 的编译器配置文件。<br>typings.json 指定 TypeScript 定义文件。<br>systemjs.config.js 是 SystemJS 的配置文件。</p>
<h4 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h4><p>使用 npm 命令来安装 package.json 中列出的依赖包。请在终端窗口 ( 或 Windows 的 cmd 窗口 ) 中输入下列命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">在 npm install 之后， typings 目录也可能不会出现。如果是这样，请手动安装它们。</div><div class="line">npm run typings install</div></pre></td></tr></table></figure>
<h4 id="用-npm-添加需要的库和依赖包"><a href="#用-npm-添加需要的库和依赖包" class="headerlink" title="用 npm 添加需要的库和依赖包"></a>用 npm 添加需要的库和依赖包</h4><p>Angular 应用开发者依靠 npm 包管理器来安装应用所需的库和依赖包。 Angular 开发组建议的那组初学者包是通过 dependencies 和 devDependencies 指定的。<br>这些脚本的用途如下：</p>
<p>npm start - 同时运行编译器和一个服务器，它们都工作在“监视模式”下。</p>
<p>npm run tsc - 运行一次 TypeScript 编译器</p>
<p>npm run tsc:w - 在“监视模式”下运行 TypeScript 编译器，进程持续运行，等待 TypeScript 文件的变化，一旦变化，就重新编译它们。</p>
<p>npm run lite - 运行 lite-server ——一个轻量级、静态的文件服务器，对使用路由的 Angular 应用提供了优秀的支持。</p>
<p>npm run typings - 单独运行 typings 工具</p>
<p>npm run postinstall - 当 npm 安装完当前包时，它会被自动调用。这里的这个脚本会安装 typings.json 中定义的 TypeScript 定义文件</p>
<h3 id="我们的第一个-Angular-组件"><a href="#我们的第一个-Angular-组件" class="headerlink" title="我们的第一个 Angular 组件"></a>我们的第一个 Angular 组件</h3><p>创建一个文件夹，用于保存应用程序，并且添加一个超级简单的 Angular 组件。</p>
<p>Let’s create a folder to hold our application and add a super-simple Angular component.</p>
<p>在项目的根目录下 创建一个 app 子目录 ：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir app</div></pre></td></tr></table></figure></p>
<p>创建组件文件 app/app.component.ts ( 在新建的这个目录中 ) ，内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import &#123; Component &#125; from &apos;@angular/core&apos;;</div><div class="line">@Component(&#123;</div><div class="line">  selector: &apos;my-app&apos;,</div><div class="line">  template: &apos;&lt;h1&gt;My First Angular 2 App&lt;/h1&gt;&apos;</div><div class="line">&#125;)</div><div class="line">export class AppComponent &#123; &#125;</div></pre></td></tr></table></figure></p>
<p><strong>最终的项目目录结构是这样的：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">angular2-quickstart/</div><div class="line">├── app/</div><div class="line">│   ├── app.component.ts</div><div class="line">│   ├── main.ts</div><div class="line">├── node_modules .../</div><div class="line">├── typings .../</div><div class="line">├── index.html/</div><div class="line">├── package.json/</div><div class="line">├── styles.css/</div><div class="line">├── systemjs.config.js/</div><div class="line">├── tsconfig.json/</div><div class="line">├── typings.json/</div></pre></td></tr></table></figure></p>
<p><a href="https://angularjs.org/" target="_blank" rel="external">Angular</a><br><a href="https://angular.cn/" target="_blank" rel="external">一套框架，多种平台</a><br><a href="http://angularjs.cn/" target="_blank" rel="external">AngularJS中文社区</a><br><a href="http://www.runoob.com/angularjs/angularjs-tutorial.html" target="_blank" rel="external">AngularJS 教程</a><br><a href="http://www.imooc.com/view/203" target="_blank" rel="external">阿里懒懒交流会AngularJS</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SVN的介绍和应用]]></title>
      <url>http://yoursite.com/2016/07/23/x9/</url>
      <content type="html"><![CDATA[<h2 id="SVN服务器搭建和使用"><a href="#SVN服务器搭建和使用" class="headerlink" title="SVN服务器搭建和使用"></a>SVN服务器搭建和使用</h2><h3 id="Subversion是什么？"><a href="#Subversion是什么？" class="headerlink" title="Subversion是什么？"></a>Subversion是什么？</h3><p>它是一个自由/开源的版本控制系统，一组文件存放在中心版本库，记录每一次文件和目录的修改，Subversion允许把数据恢复到早期版本，或是检查数据修改的历史，Subversion可以通过网络访问它的版本库，从而使用户在不同的电脑上进行操作。<br>首先来下载和搭建SVN服务器,下载地址如下: <a href="http://subversion.apache.org/packages.html" target="_blank" rel="external">http://subversion.apache.org/packages.html</a></p>
<h3 id="搭建服务端"><a href="#搭建服务端" class="headerlink" title="搭建服务端"></a>搭建服务端</h3><ul>
<li>建立版本库<br>1.要建立版本库,需要右键单击左边窗口的Repositores<br>2.在弹出的右键菜单中选择Create New Repository或者新建-&gt;Repository:<br>3.创建仓库名字（比如MyRepository），下一步<br>4.完成创建</li>
<li>建立用户和组，并分配权限<br>1.在VisualSVN Server Manager窗口的左侧右键单击用户组,选择Create User或者新建-&gt;User<br>2.填写Username和password后，点击ok按钮<br>3.点击【Add】按钮，增加longen0707到用户中(如果有多个用户，操作一样)</li>
<li>建立用户组<br>1.在VisualSVN Server Manager窗口的左侧右键单击用户组,选择Create Group或者新建-&gt;Group<br>2.在弹出窗口中填写Group name为Developers（项目名称）,然后点Add按钮,在弹出的窗口中选择Developer,加入到这个组,然后点Ok.</li>
<li>给用户组设置权限<br>1.在MyRepository上单击右键,选择属性<br>2.在弹出的对话框中,选择Security选项卡,点击Add按钮,选中longen0707,然后添加进来,权限设置为Read/Write</li>
</ul>
<h2 id="TortoiseSVN搭建"><a href="#TortoiseSVN搭建" class="headerlink" title="TortoiseSVN搭建"></a>TortoiseSVN搭建</h2><h3 id="建立库："><a href="#建立库：" class="headerlink" title="建立库："></a>建立库：</h3><p>1、新建文件夹，目录和文件夹名称最好都用英文，不要使用中文；<br>2、打开文件夹，在空白处按下“shift键+鼠标右键”；<br>3、在弹出的菜单中选择“TortoiseSVN - Create repository here”；<br>4、弹出对话框，提示创建成功，并自动在文件夹中创建了目录结构；</p>
<h3 id="导入项目："><a href="#导入项目：" class="headerlink" title="导入项目："></a>导入项目：</h3><p>1、打开已有的项目文件夹，在空白处按下“shift键+鼠标右键”；<br>2、在弹出的菜单中选择“TortoiseSVN - Import”；<br>3、选择导入路径，填写备注信息，点击“OK”开始导入；<br>4、导入完成后会弹出提示，可以拖动滚动条查看导入的文件，点击“OK”，完成导入；</p>
<h3 id="建立工作目录（检出）："><a href="#建立工作目录（检出）：" class="headerlink" title="建立工作目录（检出）："></a>建立工作目录（检出）：</h3><p>1、新建工作目录文件夹，在空白处按下“shift键+鼠标右键”；<br>2、在弹出的菜单中选择“SVN Checkout…”；<br>3、在弹出的对话框中选择库目录、工作目录，点击“OK”开始检出；<br>4、弹出详细信息对话框，导出完成后，点击“OK”；<br>可以看到工作目录中多出了库中的文件，这些文件就是有版本控制的，对这些文件的修改可以保存到库，也可以从库里恢复旧版本的文件。</p>
<h3 id="更新工作目录："><a href="#更新工作目录：" class="headerlink" title="更新工作目录："></a>更新工作目录：</h3><p>1、通常在你对工作目录进行修改前，为保证你的文件是最新的，需要进行更新操作；<br>2、在工作目录空白处点击鼠标右键，选择“SVN Update”；<br>3、会弹出对话框开始更新，并显示更新了哪些内容，库版本是多少；<br>提交工作目录：<br>1、在做了修改，需要保存到库中时，用到提交操作；<br>2、在工作目录空白处点击鼠标右键，选择“SVN Commit”；<br>3、会弹出对话框，可以输入备注信息，显示将要提交哪些文件，点击“OK”开始提交；<br>4、弹出对话框显示提交进度，完成后点击“OK”完成提交；<br><a href="http://www.cnblogs.com/armyfai/p/3985660.html" target="_blank" rel="external">SVN使用教程总结</a><br><a href="http://jingyan.baidu.com/article/358570f6638aa4ce4724fcf7.html" target="_blank" rel="external">TortoiseSVN下载,安装,配置</a><br><a href="http://jingyan.baidu.com/article/6c67b1d6f524d52787bb1ef3.html" target="_blank" rel="external">TortoiseSVN的基本使用方法</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sass-scss的使用]]></title>
      <url>http://yoursite.com/2016/07/19/x8/</url>
      <content type="html"><![CDATA[<h2 id="Sass的语法格式及编译调试"><a href="#Sass的语法格式及编译调试" class="headerlink" title="Sass的语法格式及编译调试"></a>Sass的语法格式及编译调试</h2><p> Sass 语法是 Sass 的最初语法格式，他是通过 tab 键控制缩进的一种语法规则，而且这种缩进要求非常严格。另外其不带有任何的分号和大括号。常常把这种格式称为 Sass 老版本，其文件名以“.sass”为扩展名。</p>
<h3 id="Sass-和-SCSS-有什么区别？"><a href="#Sass-和-SCSS-有什么区别？" class="headerlink" title="Sass 和 SCSS 有什么区别？"></a>Sass 和 SCSS 有什么区别？</h3><p>Sass 和 SCSS 其实是同一种东西，我们平时都称之为 Sass，两者之间不同之处有以下两点：</p>
<ul>
<li>文件扩展名不同，Sass 是以“.sass”后缀为扩展名，而 SCSS 是以“.scss”后缀为扩展名</li>
<li>语法书写方式不同，Sass 是以严格的缩进式语法规则来书写，不带大括号({})和分号(;)，而 SCSS 的语法书写和我们的 CSS 语法书写方式非常类似。</li>
</ul>
<h3 id="SCSS语法格式"><a href="#SCSS语法格式" class="headerlink" title="SCSS语法格式"></a>SCSS语法格式</h3><p>SCSS 是 Sass 的新语法格式，从外形上来判断他和 CSS 长得几乎是一模一样，代码都包裹在一对大括号里，并且末尾结束处都有一个分号。其文件名格式常常以“.scss”为扩展名。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$font-stack: Helvetica, sans-serif;</div><div class="line">$primary-color: #333;</div><div class="line"></div><div class="line">body &#123;</div><div class="line">  font: 100% $font-stack;</div><div class="line">  color: $primary-color;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不管是 Sass 的语法格式还是 SCSS 的语法格式，他们的功能都是一样的，不同的是其书写格式和文件扩展名不同，“.sass”只能使用 Sass 老语法规则（缩进规则），“.scss”使用的是 Sass 的新语法规则，也就是 SCSS 语法规则（类似 CSS 语法格式）。</p>
<h2 id="Sass的基本特性"><a href="#Sass的基本特性" class="headerlink" title="Sass的基本特性"></a>Sass的基本特性</h2><h3 id="声明变量"><a href="#声明变量" class="headerlink" title="声明变量"></a>声明变量</h3><p>在有些编程语言中（如，JavaScript）声明变量都是使用关键词“var”开头，但是在 Sass 不使用这个关键词，而是使用大家都喜欢的美元符号“$”开头。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$btn-primary-bg : $brand-primary !default;</div></pre></td></tr></table></figure></p>
<p>如果值后面加上!default则表示默认值。<br>sass 的默认变量一般是用来设置默认值，然后根据需求来覆盖的，覆盖的方式也很简单，只需要在默认变量之前重新声明下变量即可。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$baseLineHeight: 2;</div><div class="line">$baseLineHeight: 1.5 !default;</div></pre></td></tr></table></figure></p>
<h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p>当在局部范围（选择器内、函数内、混合宏内…）声明一个已经存在于全局范围内的变量时，局部变量就成为了全局变量的影子。基本上，局部变量只会在局部范围内覆盖全局变量。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//SCSS</div><div class="line">$color: orange !default;//定义全局变量</div><div class="line">.block &#123;</div><div class="line">  color: $color;//调用全局变量</div><div class="line">&#125;</div><div class="line">em &#123;</div><div class="line">  $color: red;//定义局部变量（全局变量 $color 的影子）</div><div class="line">  a &#123;</div><div class="line">    color: $color;//调用局部变量</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h3><p>1、选择器嵌套<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  a &#123;</div><div class="line">    color: red;</div><div class="line"></div><div class="line">    header &amp; &#123;</div><div class="line">      color:green;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>2、属性嵌套<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.box &#123;</div><div class="line">  border: &#123;</div><div class="line">   top: 1px solid red;</div><div class="line">   bottom: 1px solid green;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3、伪类嵌套<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">.clearfix&#123;</div><div class="line">&amp;:before,</div><div class="line">&amp;:after &#123;</div><div class="line">    content:"";</div><div class="line">    display: table;</div><div class="line">  &#125;</div><div class="line">&amp;:after &#123;</div><div class="line">    clear:both;</div><div class="line">    overflow: hidden;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>避免选择器嵌套：<br>选择器嵌套最大的问题是将使最终的代码难以阅读。开发者需要花费巨大精力计算不同缩进级别下的选择器具体的表现效果。<br>选择器越具体则声明语句越冗长，而且对最近选择器的引用(&amp;)也越频繁。在某些时候，出现混淆选择器路径和探索下一级选择器的错误率很高，这非常不值得。<br>为了防止此类情况，我们应该尽可能避免选择器嵌套。然而，显然只有少数情况适应这一措施。</p>
<p><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">全局 CSS 样式</a><br><a href="http://sass-lang.com/" target="_blank" rel="external">Your laptop needs more Sass</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转Bootstrap(JS插件篇)]]></title>
      <url>http://yoursite.com/2016/07/16/x7/</url>
      <content type="html"><![CDATA[<h2 id="导入JavaScript插件"><a href="#导入JavaScript插件" class="headerlink" title="导入JavaScript插件"></a>导入JavaScript插件</h2><p>Bootstrap除了包含丰富的Web组件之外，如前面介绍的下拉菜单、按钮组、导航、分页等。他还包括一些JavaScript的插件。</p>
<p>Bootstrap的JavaScript插件可以单独导入到页面中，也可以一次性导入到页面中。因为在Bootstrap中的JavaScript插件都是依赖于jQuery库，所以不论是单独导入还一次性导入之前必须先导入jQuery库。</p>
<p>一次性导入：</p>
<p>Bootstrap提供了一个单一的文件，这个文件包含了Bootstrap的所有JavaScript插件，即bootstrap.js（压缩版本：bootstrap.min.js）。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">!—导入jQuery版本库，因为Bootstrap的JavaScript插件依赖于jQuery</span> <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://libs.baidu.com/jquery/1.9.0/jquery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">!—-</span> 一次性导入所有<span class="attr">Bootstrap</span>的<span class="attr">JavaScript</span>插件（压缩版本） <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><a href="http://getbootstrap.com/" target="_blank" rel="external">bootstrap官网</a><br><a href="http://v3.bootcss.com/javascript/" target="_blank" rel="external">JavaScript 插件</a><br><a href="http://www.imooc.com/learn/262" target="_blank" rel="external">玩转Bootstrap（JS插件篇）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[玩转Bootstrap]]></title>
      <url>http://yoursite.com/2016/07/09/x6/</url>
      <content type="html"><![CDATA[<h2 id="Bootstrap到底是什么？"><a href="#Bootstrap到底是什么？" class="headerlink" title="Bootstrap到底是什么？"></a>Bootstrap到底是什么？</h2><p>2011年，twitter的“一小撮”工程师为了提高他们内部的分析和管理能力，用业余时间为他们的产品构建了一套易用、优雅、灵活、可扩展的前端工具集–BootStrap。Bootstrap由MARK OTTO和Jacob Thornton所设计和建立，在github上开源之后，迅速成为该站上最多人watch&amp;fork的项目。大量工程师踊跃为该项目贡献代码，社区惊人地活跃，代码版本进化非常快速，官方文档质量极其高(可以说是优雅)，同时涌现了许多基于Bootstrap建设的网站：界面清新、简洁;要素排版利落大方。</p>
<h3 id="GitHub上这样介绍-bootstrap"><a href="#GitHub上这样介绍-bootstrap" class="headerlink" title="GitHub上这样介绍 bootstrap"></a>GitHub上这样介绍 bootstrap</h3><ul>
<li>简单灵活可用于架构流行的用户界面和交互接口的html、css、javascript工具集。</li>
<li>基于html5、css3的bootstrap，具有大量的诱人特性：友好的学习曲线，卓越的兼容性，响应式设计，12列格网，样式向导文档。</li>
<li>自定义JQuery插件，完整的类库，基于Less等。</li>
</ul>
<h2 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h2><p>在制作Web页面时，前端人员都习惯为网站设置一个全局样式（reset.css）。那么在Bootstrap框架中也不例外。Bootstrap框架的核心是轻量的CSS基础代码库，他并没有一味的重置样式，而是注重各浏览器基础表现，降低开发难度。大部分前端人员都具有归零的思想，但实际你会发现，归零之后的样式在开发过程中会存在着潜在的问题，例如，在全局样式表中将em变成一个普通标记，明明应该是斜体，怎么就没效果了呢？</p>
<p>Bootstrap框架在这一部分做了一定的变更，不再一味追求归零，而是更注重重置可能产生问题的样式（如，body,form的margin等），保留和坚持部分浏览器的基础样式，解决部分潜在的问题，提升一些细节的体验，具体说明如下：</p>
<pre><code>移除body的margin声明
设置body的背景色为白色
为排版设置了基本的字体、字号和行高
设置全局链接颜色，且当链接处于悬浮“:hover”状态时才会显示下划线样式
</code></pre><p>其实Bootstrap的全局样式采用了“normalize.css”，但并没有一味的全部使用此重置样式，而是在此基础上进行了一些改良，让其更适合Bootstrap的设计思想。</p>
<p>你可以通过“normalize.less”（LESS版本）或“_normalize.scss”（Sass版本）进行深入的了解。</p>
<h2 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h2><h3 id="强调相关的类"><a href="#强调相关的类" class="headerlink" title="强调相关的类"></a>强调相关的类</h3><p>在Bootstrap中除了使用标签<strong>、<em>等说明正文某些字词、句子的重要性，Bootstrap还定义了一套类名，这里称其为强调类名（类似前面说的“.lead”）,这些强调类都是通过颜色来表示强调，具本说明如下：</em></strong></p>
<pre><code>.text-muted：提示，使用浅灰色（#999）
.text-primary：主要，使用蓝色（#428bca）
.text-success：成功，使用浅绿色(#3c763d)
.text-info：通知信息，使用浅蓝色（#31708f）
.text-warning：警告，使用黄色（#8a6d3b）
.text-danger：危险，使用褐色（#a94442）
</code></pre><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text-muted</span> &#123;</div><div class="line"><span class="attribute">color</span>: <span class="number">#999</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="文本对齐风格"><a href="#文本对齐风格" class="headerlink" title="文本对齐风格"></a>文本对齐风格</h3><p>在排版中离不开文本的对齐方式。在CSS中常常使用text-align来实现文本的对齐风格的设置。其中主要有四种风格：</p>
<p>  ☑  左对齐，取值left</p>
<p>  ☑  居中对齐，取值center</p>
<p>  ☑  右对齐，取值right</p>
<p>  ☑  两端对齐，取值justify</p>
<p>为了简化操作，方便使用，Bootstrap通过定义四个类名来控制文本的对齐风格：</p>
<p>  ☑   .text-left：左对齐</p>
<p>  ☑   .text-center：居中对齐</p>
<p>  ☑   .text-right：右对齐</p>
<p>  ☑   .text-justify：两端对齐<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.text-left</span> &#123;</div><div class="line"><span class="attribute">text-align</span>: left;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="列表–去点去编号"><a href="#列表–去点去编号" class="headerlink" title="列表–去点去编号"></a>列表–去点去编号</h3><p>小伙伴们可以看到，在Bootstrap中默认情况下无序列表和有序列表是带有项目符号的，但在实际工作中很多时候，我们的列表是不需要这个编号的，比如说用无序列表做导航的时候。Bootstrap为众多开发者考虑的非常周道，通过给无序列表添加一个类名“.list-unstyled”,这样就可以去除默认的列表样式的风格。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list-unstyled</span> &#123;</div><div class="line"><span class="attribute">padding-left</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="列表–内联列表"><a href="#列表–内联列表" class="headerlink" title="列表–内联列表"></a>列表–内联列表</h3><p>Bootstrap像去点列表一样，通过添加类名“.list-inline”来实现内联列表，简单点说就是把垂直列表换成水平列表，而且去掉项目符号（编号），保持水平显示。也可以说内联列表就是为制作水平导航而生。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.list-inline</span> &#123;</div><div class="line"><span class="attribute">padding-left</span>: <span class="number">0</span>;</div><div class="line"><span class="attribute">margin-left</span>: -<span class="number">5px</span>;</div><div class="line"><span class="attribute">list-style</span>: none;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.list-inline</span> &gt; <span class="selector-tag">li</span> &#123;</div><div class="line"><span class="attribute">display</span>: inline-block;</div><div class="line"><span class="attribute">padding-right</span>: <span class="number">5px</span>;</div><div class="line"><span class="attribute">padding-left</span>: <span class="number">5px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格是Bootstrap的一个基础组件之一，Bootstrap为表格提供了1种基础样式和4种附加样式以及1个支持响应式的表格。在使用Bootstrap的表格过程中，只需要添加对应的类名就可以得到不同的表格风格，在接下来的内容中，我们会详细介绍Bootstrap的表格使用。</p>
<p>同样的，如果你对CSS预处理器熟悉，你可以使用Bootstrap提供的预处理版本：<br>  ☑  LESS版本，对应的文件是 tables.less<br>  ☑  Sass版本，对应的文件是 _tables.scss</p>
<p>如果你不懂LESS或Sass也不妨，你在bootstrap.css文件中第1402行~第1630行中可以查阅到所有有关于table的样式代码。由于代码太长，此处不一一列举。</p>
<p>刚已经说了，Bootstrap为表格不同的样式风格提供了不同的类名，主要包括：</p>
<p>  ☑  .table：基础表格</p>
<p>  ☑  .table-striped：斑马线表格</p>
<p>  ☑  .table-bordered：带边框的表格</p>
<p>  ☑  .table-hover：鼠标悬停高亮的表格</p>
<p>  ☑  .table-condensed：紧凑型表格</p>
<p>  ☑  .table-responsive：响应式表格</p>
<h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><h3 id="基础表单"><a href="#基础表单" class="headerlink" title="基础表单"></a>基础表单</h3><p>表单主要功能是用来与用户做交流的一个网页控件，良好的表单设计能够让网页与用户更好的沟通。表单中常见的元素主要包括：文本输入框、下拉选择框、单选按钮、复选按钮、文本域和按钮等。其中每个控件所起的作用都各不相同，而且不同的浏览器对表单控件渲染的风格都各有不同。</p>
<p>同样，表单也是Bootstrap框架中的核心内容，下面向大家介绍Bootstrap框架中表单的制作。</p>
<p>表单源码查询</p>
<p>Bootstrap框架的表单，其源码占据了大量的代码，同样的，根据不同的Bootstrap版本，你可以轻松获取相应的源码：</p>
<p>   ☑   LESS版本：对应源文件 forms.less</p>
<p>   ☑ ​  Sass版本：对应源文件 _forms.scss</p>
<p>编译后的Bootstrap版本，可以查阅bootstrap.css文件第1630行~第1991行</p>
<p>不过在样式表中，还对表单做了一些初始化，详细代码可以查阅bootstrap.css文件第110行~第178行。</p>
<p>对于基础表单，Bootstrap并未对其做太多的定制性效果设计，仅仅对表单内的fieldset、legend、label标签进行了定制。如：</p>
<p>/<em>源码请查阅bootstrap.css文件第1631行~第1652行</em>/<br>主要将这些元素的margin、padding和border等进行了细化设置。</p>
<p>当然表单除了这几个元素之外，还有input、select、textarea等元素，在Bootstrap框架中，通过定制了一个类名<code>form-control</code>，也就是说，如果这几个元素使用了类名“form-control”，将会实现一些设计上的定制效果。</p>
<p>1、宽度变成了100%</p>
<p>2、设置了一个浅灰色（#ccc）的边框</p>
<p>3、具有4px的圆角</p>
<p>4、设置阴影效果，并且元素得到焦点之时，阴影和边框效果会有所变化</p>
<p>5、设置了placeholder的颜色为#999</p>
<p>详细请查阅bootstrap.css文件第1690行~第1732行。<br><a href="http://getbootstrap.com/" target="_blank" rel="external">bootstrap官网</a><br><a href="http://v3.bootcss.com/css/" target="_blank" rel="external">全局 CSS 样式</a><br><a href="http://v3.bootcss.com/components/" target="_blank" rel="external">组件</a><br><a href="http://www.imooc.com/learn/141" target="_blank" rel="external">玩转Bootstrap（基础）</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github静态页面创建]]></title>
      <url>http://yoursite.com/2016/07/05/x5/</url>
      <content type="html"><![CDATA[<h2 id="github静态页面创建"><a href="#github静态页面创建" class="headerlink" title="github静态页面创建"></a>github静态页面创建</h2><p>一般采用的有下面4种方法</p>
<h3 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h3><p>markdown静态文件生成</p>
<h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><p>PHP动态解析</p>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>node-js编译</p>
<h3 id="gh-pages"><a href="#gh-pages" class="headerlink" title="gh-pages"></a>gh-pages</h3><p>github分支</p>
<h2 id="如何使用gh-pages创建页面"><a href="#如何使用gh-pages创建页面" class="headerlink" title="如何使用gh-pages创建页面"></a>如何使用gh-pages创建页面</h2><h3 id="可以在github页面中的setting项里的GitHub-Pages选择默认的Launch创建即可"><a href="#可以在github页面中的setting项里的GitHub-Pages选择默认的Launch创建即可" class="headerlink" title="可以在github页面中的setting项里的GitHub Pages选择默认的Launch创建即可"></a>可以在github页面中的setting项里的GitHub Pages选择默认的Launch创建即可</h3><h3 id="也可以创建gh-pages的分支"><a href="#也可以创建gh-pages的分支" class="headerlink" title="也可以创建gh-pages的分支"></a>也可以创建gh-pages的分支</h3><p>在上述gh-pages里的分支修改代码发布即可</p>
<h2 id="github扩展"><a href="#github扩展" class="headerlink" title="github扩展"></a>github扩展</h2><p><a href="http://www.imooc.com/learn/390" target="_blank" rel="external">搬进github</a><br><a href="http://justcoding.iteye.com/blog/1959737" target="_blank" rel="external">使用Jekyll搭建bok</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Github入门]]></title>
      <url>http://yoursite.com/2016/07/05/x4/</url>
      <content type="html"><![CDATA[<h2 id="初识Github"><a href="#初识Github" class="headerlink" title="初识Github"></a>初识Github</h2><p>GitHub可以托管各种git库，并提供一个web界面，但与其它像 SourceForge或Google Code这样的服务不同，GitHub的独特卖点在于从另外一个项目进行分支的简易性。为一个项目贡献代码非常简单：首先点击项目站点的“fork”的按钮，然后将代码检出并将修改加入到刚才分出的代码库中，最后通过内建的“pull request”机制向项目负责人申请代码合并。已经有人将GitHub称为代码玩家的MySpace。<br>在GitHub进行分支就像在Myspace（或Facebook…）进行交友一样，在社会关系图的节点中不断的连线。<br>GitHub 使用 git 分布式版本控制系统，而 git 最初是 Linus Torvalds 为帮助Linux开发而创造的，它针对的是 Linux 平台，因此 git 和 Windows 从来不是最好的朋友，因为它一点也不像 Windows。GitHub 发布了GitHub for Windows，为 Windows 平台开发者提供了一个易于使用的 Git 图形客户端。</p>
<h3 id="GitHub-For-Windows"><a href="#GitHub-For-Windows" class="headerlink" title="GitHub For Windows"></a>GitHub For Windows</h3><p>GitHub for Windows 是一个 Metro 风格应用程序，集成了自包含版本的 Git，bash 命令行 shell，PowerShell 的 posh-git 扩展。GitHub 为 Windows 用户提供了一个基本的图形前端去处理大部分常用版本控制任务，可以创建版本库，向本地版本库递交补丁，在本地和远程版本库之间同步。微软也通过CodePlex向开发者提供 git 版本控制系统，而 GitHub 创造了一个更具有吸引力的 Windows 版本。</p>
<p>GitHub上已自动配置的Mac笔记本电脑，一个工具，可以转换设置Linux或Windows机器。</p>
<p>BOXEN是GitHub的自动化工具，设置和配置的Mac笔记本电脑软件开发[3]或其他类型的工作，正在使用他们的开发人员，律师，设计师，付货人，等。我们的想法是准备系统以自动方式和作为无差错尽可能用最少的干预工作。根据GitHub上，与一个新的开发机器上，他的Mac系统成立，并准备在30分钟内提交代码。</p>
<p>BOXEN的基础上收集了大量的几十个木偶模块，使设置的各种软件，如卡桑德拉，MongoDB中，Java软件中，Python和Ruby开发中，节点，JS，nginx的，Skype公司，甚至MINECRAFT。虽然机器上配备了一个预配置，每个用户都可以调整它的配置应有的作用。</p>
<h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="注册账户以及创建仓库"><a href="#注册账户以及创建仓库" class="headerlink" title="注册账户以及创建仓库"></a>注册账户以及创建仓库</h3><p>要想使用github第一步当然是注册github账号了。之后就可以创建仓库了（免费用户只能建公共仓库），Create a New Repository，填好名称后Create，之后会出现一些仓库的配置信息，这也是一个git的简单教程。</p>
<h3 id="安装客户端msysgit"><a href="#安装客户端msysgit" class="headerlink" title="安装客户端msysgit"></a>安装客户端msysgit</h3><p>github是服务端，要想在自己电脑上使用git我们还需要一个git客户端，我这里选用msysgit，这个只是提供了git的核心功能，而且是基于命令行的。如果想要图形界面的话只要在msysgit的基础上安装TortoiseGit即可。</p>
<p>装完msysgit后右键鼠标会多出一些选项来，在本地仓库里右键选择Git Init Here，会多出来一个.git文件夹，这就表示本地git创建成功。右键Git Bash进入git命令行，为了把本地的仓库传到github，还需要配置ssh key。</p>
<h3 id="配置Git"><a href="#配置Git" class="headerlink" title="配置Git"></a>配置Git</h3><p>首先在本地创建ssh key；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>后面的your_email@youremail.com改为你的邮箱，之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>
<p>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。为了验证是否成功，在git bash下输入：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div></pre></td></tr></table></figure>
<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。</p>
<p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name <span class="string">"your name"</span></div><div class="line">$ git config --global user.email <span class="string">"your_email@youremail.com"</span></div></pre></td></tr></table></figure></p>
<p>进入要上传的仓库，右键git bash，添加远程地址：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:yourName/yourRepo.git</div></pre></td></tr></table></figure></p>
<p>后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>
<h3 id="提交、上传"><a href="#提交、上传" class="headerlink" title="提交、上传"></a>提交、上传</h3><p>接下来在本地仓库里添加一些文件，比如README，<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git add README</div><div class="line">$ git commit -m <span class="string">"first commit"</span></div></pre></td></tr></table></figure></p>
<p>上传到github：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git push origin master</div></pre></td></tr></table></figure></p>
<p>git push命令会将本地仓库推送到远程服务器。<br>git pull命令则相反。</p>
<p>修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件，也可以用git add -i来智能添加文件。之后git commit提交本次修改，git push上传到github。</p>
<h2 id="github扩展"><a href="#github扩展" class="headerlink" title="github扩展"></a>github扩展</h2><p><a href="http://www.imooc.com/learn/390" target="_blank" rel="external">搬进github</a><br><a href="http://www.yangzhiping.com/tech/github.html" target="_blank" rel="external">如何高效利用GitHub</a><br><a href="http://github.phodal.com/" target="_blank" rel="external">GitHub 漫游指南</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git的安装及使用技巧]]></title>
      <url>http://yoursite.com/2016/07/04/x3/</url>
      <content type="html"><![CDATA[<h2 id="SVN与Git的最主要的区别"><a href="#SVN与Git的最主要的区别" class="headerlink" title="SVN与Git的最主要的区别"></a>SVN与Git的最主要的区别</h2><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就纳闷了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<h2 id="Git搭建和使用"><a href="#Git搭建和使用" class="headerlink" title="Git搭建和使用"></a>Git搭建和使用</h2><h3 id="Git服务端"><a href="#Git服务端" class="headerlink" title="Git服务端"></a>Git服务端</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#安装git</span></div><div class="line">sudo apt-get install git</div><div class="line">yum install git</div><div class="line"></div><div class="line"><span class="comment">#创建一个git用户，用来运行git服务</span></div><div class="line">sudo adduser git</div><div class="line"></div><div class="line"><span class="comment">#创建证书使用公钥免密码登录(可选)</span></div><div class="line">ssh-keygen -t rsa</div><div class="line">vi ~/.ssh/authorized_keys</div><div class="line"></div><div class="line"><span class="comment">#初始化Git仓库</span></div><div class="line">sudo git init --bare sample.git</div><div class="line">sudo chown -R git:git sample.git</div><div class="line"></div><div class="line"><span class="comment">#禁用shell登录</span></div><div class="line">vi /etc/passwd</div><div class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</div><div class="line"></div><div class="line"><span class="comment">#在客户端上克隆远程仓库</span></div><div class="line">git <span class="built_in">clone</span> git@server:/srv/sample.git</div></pre></td></tr></table></figure>
<p>管理公钥推荐使用Gitosis<br>Gitosis - <a href="https://github.com/res0nat0r/gitosis" target="_blank" rel="external">GitHub - res0nat0r/gitosis: Manage git repositories, provide access to them over SSH, with tight access control and not needing shell accounts.</a><br>Gitosis配置手记 - <a href="http://debugo.com/gitosis/" target="_blank" rel="external">http://debugo.com/gitosis/</a><br>管理权限推荐使用Gitolite<br>Gitolite - <a href="https://github.com/sitaramc/gitolite" target="_blank" rel="external">GitHub - sitaramc/gitolite: Hosting git repositories – Gitolite allows you to setup git hosting on a central server, with very fine-grained access control and many (many!) more powerful features</a></p>
<h3 id="Git客服端"><a href="#Git客服端" class="headerlink" title="Git客服端"></a>Git客服端</h3><blockquote>
<p>Git客户端可以按个人习惯来选择，遵守团队协作中的Git规范标准才是更重要的</p>
</blockquote>
<p><a href="https://git-scm.com/" target="_blank" rel="external">Git</a><br><a href="https://tortoisegit.org/" target="_blank" rel="external">TortoiseGit</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#以最基本的Git命令行为例，先下载Git</span></div><div class="line">https://git-scm.com/download/</div><div class="line"></div><div class="line"><span class="comment">#配置git提交用户名和邮箱，定义别名方便区分</span></div><div class="line">git config --global user.name <span class="string">"你的姓名"</span></div><div class="line">git config --global user.email <span class="string">"you@example.com"</span></div><div class="line"></div><div class="line"><span class="comment">#克隆仓库</span></div><div class="line">git <span class="built_in">clone</span> <span class="built_in">cap</span>@172.28.70.243:/<span class="built_in">cap</span>/cap.git</div><div class="line"></div><div class="line">$ git <span class="built_in">clone</span> <span class="built_in">cap</span>@172.28.70.243:/<span class="built_in">cap</span>/cap.git</div><div class="line">Cloning into <span class="string">'cap'</span>...</div><div class="line">warning: You appear to have cloned an empty repository.</div><div class="line">Checking connectivity... done.</div><div class="line"></div><div class="line"><span class="comment">#测试推送</span></div><div class="line">touch README</div><div class="line">git add README</div><div class="line">git commit -m <span class="string">"add readme"</span></div><div class="line">git push origin master</div><div class="line"></div><div class="line">Counting objects: 3, done.</div><div class="line">Writing objects: 100% (3/3), 199 bytes | 0 bytes/s, done.</div><div class="line">Total 3 (delta 0), reused 0 (delta 0)</div><div class="line">To <span class="built_in">cap</span>@172.28.70.243:/<span class="built_in">cap</span>/cap.git</div><div class="line">* [new branch] master -&gt; master</div></pre></td></tr></table></figure>
<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><p><strong>符号约定</strong></p>
<ul>
<li><code>&lt;xxx&gt;</code> 自定义内容</li>
<li><code>[xxx]</code> 可选内容</li>
<li><code>[&lt;xxx&gt;]</code>自定义可选内容</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始设置</span></div><div class="line">git config --global user.name <span class="string">"&lt;用户名&gt;"</span> <span class="comment">#设置用户名</span></div><div class="line">git config --global user.email <span class="string">"&lt;电子邮件&gt;"</span> <span class="comment">#设置电子邮件</span></div><div class="line"></div><div class="line"><span class="comment">#本地操作</span></div><div class="line">git add [-i] <span class="comment">#保存更新，-i为逐个确认。</span></div><div class="line">git status <span class="comment">#检查更新。</span></div><div class="line">git commit [<span class="_">-a</span>] -m <span class="string">"&lt;更新说明&gt;"</span> <span class="comment">#提交更新，-a为包含内容修改和增删，-m为说明信息，也可以使用 -am。</span></div><div class="line"></div><div class="line"><span class="comment">#远端操作</span></div><div class="line">git <span class="built_in">clone</span> &lt;git地址&gt; <span class="comment">#克隆到本地。</span></div><div class="line">git fetch <span class="comment">#远端抓取。</span></div><div class="line">git merge <span class="comment">#与本地当前分支合并。</span></div><div class="line">git pull [&lt;远端别名&gt;] [&lt;远端branch&gt;] <span class="comment">#抓取并合并,相当于第2、3步</span></div><div class="line">git push [<span class="_">-f</span>] [&lt;远端别名&gt;] [&lt;远端branch&gt;] <span class="comment">#推送到远端，-f为强制覆盖</span></div><div class="line">git remote add &lt;别名&gt; &lt;git地址&gt; <span class="comment">#设置远端别名</span></div><div class="line">git remote [-v] <span class="comment">#列出远端，-v为详细信息</span></div><div class="line">git remote show &lt;远端别名&gt; <span class="comment">#查看远端信息</span></div><div class="line">git remote rename &lt;远端别名&gt; &lt;新远端别名&gt; <span class="comment">#重命名远端</span></div><div class="line">git remote rm &lt;远端别名&gt; <span class="comment">#删除远端</span></div><div class="line">git remote update [&lt;远端别名&gt;] <span class="comment">#更新分支列表</span></div><div class="line"></div><div class="line"><span class="comment">#分支相关</span></div><div class="line">git branch [-r] [<span class="_">-a</span>] <span class="comment">#列出分支，-r远端 ,-a全部</span></div><div class="line">git branch &lt;分支名&gt; <span class="comment">#新建分支</span></div><div class="line">git branch -b &lt;分支名&gt; <span class="comment">#新建并切换分支</span></div><div class="line">git branch <span class="_">-d</span> &lt;分支名&gt; <span class="comment">#删除分支</span></div><div class="line">git checkout &lt;分支名&gt; <span class="comment">#切换到分支</span></div><div class="line">git checkout -b &lt;本地branch&gt; [-t &lt;远端别名&gt;/&lt;远端分支&gt;] <span class="comment">#-b新建本地分支并切换到分支, -t绑定远端分支</span></div><div class="line">git merge &lt;分支名&gt; <span class="comment">#合并某分支到当前分支</span></div></pre></td></tr></table></figure>
<p>Git常用命令 - <a href="http://gityuan.com/2015/06/27/git-notes/" target="_blank" rel="external">http://gityuan.com/2015/06/27/git-notes/</a></p>
<ul>
<li>workspace: 本地的工作目录。（记作A）</li>
<li>index：缓存区域，临时保存本地改动。（记作B）</li>
<li>local repository: 本地仓库，只想最后一次提交HEAD。（记作C）</li>
<li>remote repository：远程仓库。（记作D）</li>
</ul>
<blockquote>
<p>以下所有的命令的功能说明，都采用上述的标记的A、B、C、D的方式来阐述。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化</span></div><div class="line">git init //创建</div><div class="line">git <span class="built_in">clone</span> /path/to/repository //检出</div><div class="line">git config --global user.email <span class="string">"you@example.com"</span> //配置email</div><div class="line">git config --global user.name <span class="string">"Name"</span> //配置用户名</div><div class="line"><span class="comment">#操作</span></div><div class="line">git add &lt;file&gt; // 文件添加，A → B</div><div class="line">git add . // 所有文件添加，A → B</div><div class="line">git commit -m <span class="string">"代码提交信息"</span> //文件提交，B → C</div><div class="line">git commit --amend //与上次commit合并, *B → C</div><div class="line">git push origin master //推送至master分支, C → D</div><div class="line">git pull //更新本地仓库至最新改动， D → A</div><div class="line">git fetch //抓取远程仓库更新， D → C</div><div class="line">git <span class="built_in">log</span> //查看提交记录</div><div class="line">git status //查看修改状态</div><div class="line">git diff//查看详细修改内容</div><div class="line">git show//显示某次提交的内容</div><div class="line"><span class="comment">#撤销操作</span></div><div class="line">git reset &lt;file&gt;//某个文件索引会回滚到最后一次提交， C → B</div><div class="line">git reset//索引会回滚到最后一次提交， C → B</div><div class="line">git reset --hard // 索引会回滚到最后一次提交， C → B → A</div><div class="line">git checkout // 从index复制到workspace， B → A</div><div class="line">git checkout -- files // 文件从index复制到workspace， B → A</div><div class="line">git checkout HEAD -- files // 文件从<span class="built_in">local</span> repository复制到workspace， C → A</div><div class="line"><span class="comment">#分支相关</span></div><div class="line">git checkout -b branch_name //创建名叫“branch_name”的分支，并切换过去</div><div class="line">git checkout master //切换回主分支</div><div class="line">git branch <span class="_">-d</span> branch_name // 删除名叫“branch_name”的分支</div><div class="line">git push origin branch_name //推送分支到远端仓库</div><div class="line">git merge branch_name // 合并分支branch_name到当前分支(如master)</div><div class="line">git rebase //衍合，线性化的自动， D → A</div><div class="line"><span class="comment">#冲突处理</span></div><div class="line">git diff //对比workspace与index</div><div class="line">git diff HEAD //对于workspace与最后一次commit</div><div class="line">git diff &lt;<span class="built_in">source</span>_branch&gt; &lt;target_branch&gt; //对比差异</div><div class="line">git add &lt;filename&gt; //修改完冲突，需要add以标记合并成功</div><div class="line"><span class="comment">#其他</span></div><div class="line">gitk //开灯图形化git</div><div class="line">git config color.ui <span class="literal">true</span> //彩色的 git 输出</div><div class="line">git config format.pretty oneline //显示历史记录时，每个提交的信息只显示一行</div><div class="line">git add -i //交互式添加文件到暂存区</div></pre></td></tr></table></figure>
<h2 id="Git使用规范"><a href="#Git使用规范" class="headerlink" title="Git使用规范"></a>Git使用规范</h2><p>Git 使用规范流程 - Git 使用规范流程<br>团队中的 Git 实践 - <a href="https://ourai.ws/posts/working-with-git-in-team/" target="_blank" rel="external">https://ourai.ws/posts/working-with-git-in-team/</a><br>构家网 git 团队协作使用规范 v2 - <a href="http://wenku.baidu.com/view/e1430d1b7f1922791788e81e" target="_blank" rel="external">http://wenku.baidu.com/view/e1430d1b7f1922791788e81e</a></p>
<blockquote>
<p>Git使用规范提醒</p>
</blockquote>
<ul>
<li>使用Git过程中，必须通过创建分支进行开发，坚决禁止在主干分支上直接开发。review的同事有责任检查其他同事是否遵循分支规范。</li>
<li>在Git中，默认是不会提交空目录的，如果想提交某个空目录到版本库中，需要在该目录下新建一个 .gitignore 的空白文件，就可以提交了</li>
<li>把外部文件纳入到自己的 Git 分支来的时候一定要记得是先比对，确认所有修改都是自己修改的，然后再纳入。不然，容易出现代码回溯</li>
<li>多人协作时，不要各自在自己的 Git 分支开发，然后发文件合并。正确的方法应该是开一个远程分支，然后一起在远程分支里协作。不然，容易出现代码回溯（即别人的代码被覆盖的情况）</li>
<li>每个人提交代码是一定要 git diff 看提交的东西是不是都是自己修改的。如果有不是自己修改的内容，很可能就是代码回溯</li>
<li>review 代码的时候如果看到有被删除掉的代码，一定要确实是否是写代码的同事自己删除的。如果不是，很可能就是代码回溯</li>
</ul>
<h2 id="Git扩展阅读"><a href="#Git扩展阅读" class="headerlink" title="Git扩展阅读"></a>Git扩展阅读</h2><p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">Git教程</a><br><a href="https://www.zhihu.com/question/20401926/answer/97256184" target="_blank" rel="external">知乎的回答</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Windows下使用hexo在github上创建博客]]></title>
      <url>http://yoursite.com/2016/07/04/x2/</url>
      <content type="html"><![CDATA[<h2 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h2><p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。<br>发布时，Hexo可以部署在自己的Node服务器上面，也可以部署github上面。对于个人用户来说，部署在github上好处颇多，不仅可以省去服务器的成本，还可以减少各种系统运维的麻烦事(系统管理、备份、网络)。所以，基于github的个人站点，正在开始流行起来….<br>Hexo的官方网站：<a href="http://hexo.io/" target="_blank" rel="external">http://hexo.io/</a> ，也是基于Github构建的网站。</p>
<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>系统环境：</p>
<p><ul></ul></p>
<p><li>Win10 64bit</li></p>
<p><li>node v4.4.7</li></p>
<p><li>npm 2.15.8</li></p>
<p><li>Git Bash||Git Shell</li><br><br>使用Git安装Hexo，要用全局安装，加-g参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure></p>
<p>查看hexo的版本</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo version</div></pre></td></tr></table></figure>
<p>安装好后，我们就可以使用Hexo创建项目了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div></pre></td></tr></table></figure>
<p>进入目录，并启动Hexo服务器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd blog</div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>我们看到当前在目录下，出现了一个文件夹，包括初始化的文件。<br>这时端口4000被打开了，我们能过浏览器打开地址，<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a> 。<br>停止调试后即可发布！</p>
<h2 id="发布到github"><a href="#发布到github" class="headerlink" title="发布到github"></a>发布到github</h2><h3 id="创建静态文件"><a href="#创建静态文件" class="headerlink" title="创建静态文件"></a>创建静态文件</h3><p>hexo的静态博客框架博客，是只包含html, javascript, css文件的网站，没有动态的脚本。虽然我们是用Node进行的开发，但博客的发布后就与Node无关了。在发布之前，我们要通过一条命令，把所有的文章都做静态化处理，就是生成对应的html, javascript, css，使得所有的文章都是由静态文件组成的。<br>安装hexo-deployer-git。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure></p>
<p>静态化命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate</div></pre></td></tr></table></figure></p>
<h3 id="发布博客"><a href="#发布博客" class="headerlink" title="发布博客"></a>发布博客</h3><p>我们把这个博客发布到github。<br>在github中创建一个项目youngrivers.github.io，项目地址：<a href="https://github.com/youngrivers/youngrivers.github.io" target="_blank" rel="external">https://github.com/youngrivers/youngrivers.github.io</a><br>编辑全局配置文件：_config.yml，找到deploy的部分，设置github的项目地址。<br>首先要确定_config.yml的deploy:后面有一个空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repo: git@github.com/youngrivers/youngrivers.github.io.git</div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>在本地目录下，会生成一个public的目录，里面包括了所有静态化的文件。<br>然后，通过命令进行部署。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>这时我们的博客就创建好了</p>
<h2 id="hexo帮助文档"><a href="#hexo帮助文档" class="headerlink" title="hexo帮助文档"></a>hexo帮助文档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">npm install hexo -g #安装</div><div class="line">npm update hexo -g #升级</div><div class="line">hexo init #初始化</div><div class="line">hexo server #Hexo 会监视文件变动并自动更新，您无须重启服务器。</div><div class="line">hexo server -s #静态模式</div><div class="line">hexo server -p 5000 #更改端口</div><div class="line">hexo server -i 192.168.1.1 #自定义 IP</div><div class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</div><div class="line">hexo generate #使用 Hexo 生成静态文件快速而且简单</div><div class="line">hexo generate --watch #监视文件变动</div><div class="line">hexo new &quot;文件名&quot; #新建md文件</div><div class="line">hexo new page pageName #新建一个题为“pageName”的页面</div><div class="line">hexo version #查看Hexo版本</div><div class="line">hexo g -d # 等价于 hexo generate --deploy ：生成静态文件并部署</div><div class="line">hexo s -d # 等价于 hexo deploy --generate ：开启预览并部署到Github</div><div class="line">npm uninstall hexo-cli -g #卸载Hexo</div></pre></td></tr></table></figure>
<h2 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h2><ol>
<li><p>标题设置（让字体变大，和word的标题意思一样）<br>在Markdown当中设置标题，有两种方式：<br>第一种：通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题。<br>第二种：在文字开头加上 “#”，通过“#”数量表示几级标题。（一共只有1~6级标题，1级标题字体最大）</p>
</li>
<li><p>块注释（blockquote）<br>通过在文字开头添加“&gt;”表示块注释。（当&gt;和文字之间添加五个blank时，块注释的文字会有变化。）</p>
</li>
<li><p>斜体<br>将需要设置为斜体的文字两端使用1个“*”或者“_”夹起来</p>
</li>
<li><p>粗体<br>将需要设置为斜体的文字两端使用2个“*”或者“_”夹起来</p>
</li>
<li><p>无序列表<br>在文字开头添加(<em>, +, and -)实现无序列表。但是要注意在(</em>, +, and -)和文字之间需要添加空格。（建议：一个文档中只是用一种无序列表的表示方式）</p>
</li>
<li><p>有序列表<br>使用数字后面跟上句号。（还要有空格）</p>
</li>
<li><p>链接（Links）<br>Markdown中有两种方式，实现链接，分别为内联方式和引用方式。<br>内联方式：This is an <a href="http://example.com/" target="_blank" rel="external">example link</a>.<br>引用方式：<br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="external">Google</a> than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="external">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="external">MSN</a>.</p>
</li>
</ol>
<p>8.图片（Images）<br>图片的处理方式和链接的处理方式，非常的类似。<br>内联方式：<img src="/path/to/img.jpg" alt="alt text" title="Title"><br>引用方式：<br><img src="/path/to/img.jpg" alt="alt text" title="Title"></p>
<p>9.代码（HTML中所谓的Code）<br>实现方式有两种：<br>第一种：简单文字出现一个代码框。使用<code>&lt;blockquote&gt;</code>。（<code>不是单引号而是左上角的ESC下面~中的</code>）<br>第二种：大片文字需要实现代码框。使用Tab和四个空格。</p>
<p>10.脚注（footnote）<br>实现方式如下：<br>hello<a href="hi">^hello</a></p>
<p>11.下划线<br>在空白行下方添加三条“-”横线。（前面讲过在文字下方添加“-”，实现的2级标题）</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.fens.me/hexo-blog-github/" target="_blank" rel="external">张丹</a><br><a href="https://github.com/hexojs/hexo/issues/1154" target="_blank" rel="external">Hexo3.0</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Yelee主题说明]]></title>
      <url>http://yoursite.com/2016/07/03/x1/</url>
      <content type="html"><![CDATA[<p align="center"><br>    <a href="https://github.com/MOxFIVE/hexo-theme-yelee" target="_blank"><br>        <img src="http://moxfive.github.io/resources/yelee-mockup.jpg"><br>    </a><br></p>

<p>&emsp;&emsp;Theme <strong>Yelee</strong> relies on <a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">Hexo-Theme-Yilia</a>, thanks for the author <a href="https://github.com/litten" target="_blank" rel="external">Litten</a>. Fix some bugs, change lots of styles, add several features. And then I made the theme. Yelee is mainly designed for fluent text reading. I change styles and add functions, meanwhile, try hard to keep this theme simple, stupid and clear. Theme DEMO: <a href="http://moxfive.xyz" target="_blank" rel="external">MOxFIVE’s Blog</a></p>
<p align="center"><br>    <img src="https://img.shields.io/badge/Hexo-v3.1%2B-blue.svg"><br>    <img src="https://img.shields.io/badge/IE-8%2B-red.svg"><br>    <a href="https://github.com/MOxFIVE/hexo-theme-yelee/releases" target="_blank"><br>        <img src="https://img.shields.io/github/release/MOxFIVE/hexo-theme-yelee.svg"><br>    </a><br></p>

<p align="center"><br>    <a href="http://moxfive.xyz" target="_blank"><br>        <img src="http://moxfive.github.io/resources/yelee-qrcode.png"><br>    </a><br></p>

<p></p><h3 align="center"><br>    <a href="http://MOxFIVE.coding.me/yelee" target="_blank"><br>        Yelee 主题使用说明 [简中]<br>    </a><br>    <br><br>    <a href="https://github.com/MOxFIVE/yelee" target="_blank"><br>        文档 GitHub 仓库<br>    </a><br></h3><p></p>
<h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure>
<p>Change theme field in Hexo root’s _config.yml file.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">theme: yelee</div></pre></td></tr></table></figure>
<h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd themes/yelee</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h3 id="New-Features-DEMO"><a href="#New-Features-DEMO" class="headerlink" title="New Features DEMO"></a>New Features <a href="http://moxfive.xyz/yelee/new-features.html" target="_blank" rel="external">DEMO</a></h3><table>
<thead>
<tr>
<th style="text-align:center">-</th>
<th style="text-align:center">En</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1</td>
<td style="text-align:center">Flexible table of contents</td>
</tr>
<tr>
<td style="text-align:center">2</td>
<td style="text-align:center">Transparent &amp; Random background</td>
</tr>
<tr>
<td style="text-align:center">3</td>
<td style="text-align:center">Scrolling button</td>
</tr>
<tr>
<td style="text-align:center">4</td>
<td style="text-align:center">Copyright info.</td>
</tr>
<tr>
<td style="text-align:center">5</td>
<td style="text-align:center">Post navigation button</td>
</tr>
<tr>
<td style="text-align:center">6</td>
<td style="text-align:center">Site counter</td>
</tr>
<tr>
<td style="text-align:center">7</td>
<td style="text-align:center">i18n, multi-language</td>
</tr>
<tr>
<td style="text-align:center">8</td>
<td style="text-align:center">Local Site Search</td>
</tr>
<tr>
<td style="text-align:center">9</td>
<td style="text-align:center">Load Comment dynamically</td>
</tr>
</tbody>
</table>
<h3 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h3><h4 id="Internationalization"><a href="#Internationalization" class="headerlink" title="Internationalization"></a>Internationalization</h4><p>Use internationalization to present your site in different languages.</p>
<p><a href="https://hexo.io/docs/internationalization.html" target="_blank" rel="external">https://hexo.io/docs/internationalization.html</a></p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Hexo Configuration</span></div><div class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></div><div class="line"></div><div class="line"><span class="comment"># Site</span></div><div class="line"><span class="attr">language:</span> en</div></pre></td></tr></table></figure>
<h5 id="Available-Languages"><a href="#Available-Languages" class="headerlink" title="Available Languages"></a>Available Languages</h5><table>
<thead>
<tr>
<th>Code</th>
<th style="text-align:center">-</th>
<th style="text-align:center">-</th>
<th style="text-align:center">Contributor(s)</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>en</strong></td>
<td style="text-align:center">English</td>
<td style="text-align:center">英语</td>
<td style="text-align:center">MOxFIVE</td>
</tr>
<tr>
<td><strong>zh-Hans</strong></td>
<td style="text-align:center">Chinese (Simplified)</td>
<td style="text-align:center">大陆简体</td>
<td style="text-align:center">MOxFIVE</td>
</tr>
<tr>
<td><strong>zh-Hant-HK</strong></td>
<td style="text-align:center">Chinese (Traditional)</td>
<td style="text-align:center">港澳繁體</td>
<td style="text-align:center">MOxFIVE</td>
</tr>
<tr>
<td><strong>zh-Hant-TW</strong></td>
<td style="text-align:center">Chinese (Traditional)</td>
<td style="text-align:center">台灣正體</td>
<td style="text-align:center">MOxFIVE</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Any Contribution is Welcome！</strong></p>
</blockquote>
<h4 id="0-Post-Excerpt"><a href="#0-Post-Excerpt" class="headerlink" title="0. Post Excerpt"></a>0. Post Excerpt</h4><p>There are two ways to show excerpt in homepage.</p>
<ul>
<li>a: <a id="more"></a></li>
</ul>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line">date: 2015-12-03 00:00:00</div><div class="line"><span class="comment">---</span></div><div class="line">&lt;Excerpt in index&gt;</div><div class="line"><span class="addition">+ &lt;!-- more --&gt;</span></div><div class="line">&lt;The rest of contents&gt;</div></pre></td></tr></table></figure>
<ul>
<li>b: description in Front-matter</li>
</ul>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">title: Hello World</div><div class="line">date: 2015-12-03 00:00:00</div><div class="line"><span class="addition">+ description: "Welcome to Hexo! This is your very first post."</span></div><div class="line"><span class="comment">---</span></div><div class="line">&lt;Contents&gt;</div></pre></td></tr></table></figure>
<blockquote>
<p>Description only support plain text</p>
<p>Set the value of description with quotes to avoid unexpected error <code>:</code></p>
</blockquote>
<h4 id="1-About-Page"><a href="#1-About-Page" class="headerlink" title="1. About Page:"></a>1. About Page:</h4><p>cd to your hexo folder and run this code:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page about</div></pre></td></tr></table></figure>
<h4 id="2-Tags-Cloud-Page"><a href="#2-Tags-Cloud-Page" class="headerlink" title="2. Tags Cloud Page:"></a>2. Tags Cloud Page:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page tags</div></pre></td></tr></table></figure>
<blockquote>
<p>Post with several categories <a href="https://github.com/MOxFIVE/hexo-theme-yelee/issues/4" target="_blank" rel="external">issue#4</a></p>
</blockquote>
<h4 id="3-Background-image"><a href="#3-Background-image" class="headerlink" title="3. Background image:"></a>3. Background image:</h4><p>Find or change background images in folder:</p>
<blockquote>
<p><code>/yelee/source/background/</code></p>
</blockquote>
<p>Setting in <code>themes/yelee/_config.yml</code>:</p>
<p><code>background_image: 5</code></p>
<ul>
<li><p>Default value is 5, free to modify the number</p>
</li>
<li><p>“5”: show 5 images form bg-1.jpg to bg-5.jpg in <code>/yelee/source/background/</code></p>
</li>
<li><p>“0”: remove background image and use white-gray theme</p>
</li>
</ul>
<blockquote>
<p><a href="http://peteschuster.com/2013/01/saving-jpegs-for-the-web-setting-photoshop-up-for-progressive-jpegs/" target="_blank" rel="external">Saving JPEGs for the Web: Setting Photoshop Up for Progressive JPEGs</a></p>
<p>Optimize images with PhotoShop (JPEG, Quality 0, Progressive)</p>
</blockquote>
<h4 id="4-Highlight-Style"><a href="#4-Highlight-Style" class="headerlink" title="4. Highlight Style:"></a>4. Highlight Style:</h4><p>Set inline_code to style highlight text &amp; Chose a highlight theme for code block.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">highlight_style:</div><div class="line">  #on: true</div><div class="line">  inline_code: 1</div><div class="line">  code_block: 1</div></pre></td></tr></table></figure>
<p>Set <code>on: true</code> to enable this feature</p>
<p>highlight theme from <a href="https://github.com/chriskempson/tomorrow-theme" target="_blank" rel="external">https://github.com/chriskempson/tomorrow-theme</a></p>
<h4 id="5-Comment"><a href="#5-Comment" class="headerlink" title="5. Comment:"></a>5. Comment:</h4><p>Disqus, duoshuo and youyan is supported, enable ONE of them in theme’s “_config.yml”.</p>
<h4 id="6-Table-of-Contents"><a href="#6-Table-of-Contents" class="headerlink" title="6. Table of Contents:"></a>6. Table of Contents:</h4><p>Remove toc and the button via putting <code>toc: false</code> before “—“ at [post].md.</p>
<p>Hide toc in default</p>
<blockquote>
<p>Set <code>toc: false</code> in <code>yelee/_config.yml</code>.</p>
</blockquote>
<p>(<em>Set <code>toc: true</code> in front-matter to show it in certain post</em>)</p>
<h4 id="7-Copyright-info"><a href="#7-Copyright-info" class="headerlink" title="7. Copyright info.:"></a>7. Copyright info.:</h4><p>Hide this via putting <code>original: false</code> to post’s front-matter.</p>
<p>Hide Copyright info. in default</p>
<blockquote>
<p>Set <code>copyright: false</code> in <code>yelee/_config.yml</code>.</p>
</blockquote>
<p>(<em>Set <code>original: true</code> in front-matter to show it in certain post</em>)</p>
<h4 id="8-404-Page"><a href="#8-404-Page" class="headerlink" title="8. 404 Page:"></a>8. 404 Page:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new page 404</div></pre></td></tr></table></figure>
<p>And then set <code>permalink: /404</code> in <code>/source/404/index.md</code> front matter.</p>
<h4 id="9-RSS-Feed"><a href="#9-RSS-Feed" class="headerlink" title="9. RSS Feed:"></a>9. RSS Feed:</h4><p>Install plugin: <a href="https://github.com/hexojs/hexo-generator-feed" target="_blank" rel="external">hexo-generator-feed</a></p>
<h4 id="10-Sitemap-for-SEO"><a href="#10-Sitemap-for-SEO" class="headerlink" title="10. Sitemap for SEO:"></a>10. Sitemap for SEO:</h4><p>Install plugin: <a href="https://github.com/ludoviclefevre/hexo-generator-seo-friendly-sitemap" target="_blank" rel="external">hexo-generator-seo-friendly-sitemap</a></p>
<p>Baidu: <a href="https://github.com/coneycode/hexo-generator-baidu-sitemap" target="_blank" rel="external">hexo-generator-baidu-sitemap</a></p>
<h4 id="11-Apple-Touch-icon"><a href="#11-Apple-Touch-icon" class="headerlink" title="11. Apple Touch icon:"></a>11. Apple Touch icon:</h4><p>The Path is <code>/yelee/source/apple-touch-icon.png</code></p>
<p><a href="https://realfavicongenerator.net/blog/apple-touch-icon-the-good-the-bad-the-ugly/" target="_blank" rel="external">Recommended size: 180*180</a></p>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<h3 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-generator-search --save</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
